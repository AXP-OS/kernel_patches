From 5a1d9474fb11b27540fed9260649bcccd8115d42 Mon Sep 17 00:00:00 2001
From: anupritaisno1 <www.anuprita804@gmail.com>
Date: Mon, 20 Dec 2021 13:40:22 +0530
Subject: [PATCH] rewrite fortify source for 5.15 gki

Signed-off-by: anupritaisno1 <www.anuprita804@gmail.com>
Signed-off-by: randomhydrosol <randomhydrosol@glassrom.org>
---
 include/linux/fortify-string.h | 22 +++++++++++-----------
 include/linux/string.h         |  6 ++++++
 security/Kconfig               | 10 ++++++++++
 3 files changed, 27 insertions(+), 11 deletions(-)

diff --git a/include/linux/fortify-string.h b/include/linux/fortify-string.h
index 0c70febd03e95..b84110d0741a9 100644
--- a/include/linux/fortify-string.h
+++ b/include/linux/fortify-string.h
@@ -166,7 +166,7 @@ __FORTIFY_INLINE char *strncat(char *p, const char *q, __kernel_size_t count)
 
 __FORTIFY_INLINE void *memset(void *p, int c, __kernel_size_t size)
 {
-	size_t p_size = __builtin_object_size(p, 0);
+	size_t p_size = __string_size(p);
 
 	if (__builtin_constant_p(size) && p_size < size)
 		__write_overflow();
@@ -177,8 +177,8 @@ __FORTIFY_INLINE void *memset(void *p, int c, __kernel_size_t size)
 
 __FORTIFY_INLINE void *memcpy(void *p, const void *q, __kernel_size_t size)
 {
-	size_t p_size = __builtin_object_size(p, 0);
-	size_t q_size = __builtin_object_size(q, 0);
+	size_t p_size = __string_size(p);
+	size_t q_size = __string_size(q);
 
 	if (__builtin_constant_p(size)) {
 		if (p_size < size)
@@ -193,8 +193,8 @@ __FORTIFY_INLINE void *memcpy(void *p, const void *q, __kernel_size_t size)
 
 __FORTIFY_INLINE void *memmove(void *p, const void *q, __kernel_size_t size)
 {
-	size_t p_size = __builtin_object_size(p, 0);
-	size_t q_size = __builtin_object_size(q, 0);
+	size_t p_size = __string_size(p);
+	size_t q_size = __string_size(q);
 
 	if (__builtin_constant_p(size)) {
 		if (p_size < size)
@@ -210,7 +210,7 @@ __FORTIFY_INLINE void *memmove(void *p, const void *q, __kernel_size_t size)
 extern void *__real_memscan(void *, int, __kernel_size_t) __RENAME(memscan);
 __FORTIFY_INLINE void *memscan(void *p, int c, __kernel_size_t size)
 {
-	size_t p_size = __builtin_object_size(p, 0);
+	size_t p_size = __string_size(p);
 
 	if (__builtin_constant_p(size) && p_size < size)
 		__read_overflow();
@@ -221,8 +221,8 @@ __FORTIFY_INLINE void *memscan(void *p, int c, __kernel_size_t size)
 
 __FORTIFY_INLINE int memcmp(const void *p, const void *q, __kernel_size_t size)
 {
-	size_t p_size = __builtin_object_size(p, 0);
-	size_t q_size = __builtin_object_size(q, 0);
+	size_t p_size = __string_size(p);
+	size_t q_size = __string_size(q);
 
 	if (__builtin_constant_p(size)) {
 		if (p_size < size)
@@ -237,7 +237,7 @@ __FORTIFY_INLINE int memcmp(const void *p, const void *q, __kernel_size_t size)
 
 __FORTIFY_INLINE void *memchr(const void *p, int c, __kernel_size_t size)
 {
-	size_t p_size = __builtin_object_size(p, 0);
+	size_t p_size = __string_size(p);
 
 	if (__builtin_constant_p(size) && p_size < size)
 		__read_overflow();
@@ -249,7 +249,7 @@ __FORTIFY_INLINE void *memchr(const void *p, int c, __kernel_size_t size)
 void *__real_memchr_inv(const void *s, int c, size_t n) __RENAME(memchr_inv);
 __FORTIFY_INLINE void *memchr_inv(const void *p, int c, size_t size)
 {
-	size_t p_size = __builtin_object_size(p, 0);
+	size_t p_size = __string_size(p);
 
 	if (__builtin_constant_p(size) && p_size < size)
 		__read_overflow();
@@ -261,7 +261,7 @@ __FORTIFY_INLINE void *memchr_inv(const void *p, int c, size_t size)
 extern void *__real_kmemdup(const void *src, size_t len, gfp_t gfp) __RENAME(kmemdup);
 __FORTIFY_INLINE void *kmemdup(const void *p, size_t size, gfp_t gfp)
 {
-	size_t p_size = __builtin_object_size(p, 0);
+	size_t p_size = __string_size(p);
 
 	if (__builtin_constant_p(size) && p_size < size)
 		__read_overflow();
diff --git a/include/linux/string.h b/include/linux/string.h
index d68097b4f600b..bd84cf0bf64f7 100644
--- a/include/linux/string.h
+++ b/include/linux/string.h
@@ -258,6 +258,12 @@ void __read_overflow2(void) __compiletime_error("detected read beyond size of ob
 void __read_overflow3(void) __compiletime_error("detected read beyond size of object passed as 3rd parameter");
 void __write_overflow(void) __compiletime_error("detected write beyond size of object passed as 1st parameter");
 
+#ifdef CONFIG_FORTIFY_SOURCE_STRICT_STRING
+#define __string_size(p) __builtin_object_size(p, 1)
+#else
+#define __string_size(p) __builtin_object_size(p, 0)
+#endif
+
 #if !defined(__NO_FORTIFY) && defined(__OPTIMIZE__) && defined(CONFIG_FORTIFY_SOURCE)
 #include <linux/fortify-string.h>
 #endif
diff --git a/security/Kconfig b/security/Kconfig
index 5d412b3ddc496..33ad37e5bfb92 100644
--- a/security/Kconfig
+++ b/security/Kconfig
@@ -187,6 +187,16 @@ config FORTIFY_SOURCE
 	  Detect overflows of buffers in common string and memory functions
 	  where the compiler can determine and validate the buffer sizes.
 
+config FORTIFY_SOURCE_STRICT_STRING
+	bool "Harden common functions against buffer overflows"
+	depends on FORTIFY_SOURCE
+	depends on EXPERT
+	help
+	  Perform stricter overflow checks catching overflows within objects
+	  for common C string functions rather than only between objects.
+
+	  This is not yet intended for production use, only bug finding.
+
 config STATIC_USERMODEHELPER
 	bool "Force all usermode helper calls through a single binary"
 	help
