From 646d82cbf4c12f0ffb1236e75487b73b73b24d5e Mon Sep 17 00:00:00 2001
From: Thibaut Sautereau <thibaut.sautereau@ssi.gouv.fr>
Date: Fri, 20 Sep 2019 14:02:42 +0200
Subject: [PATCH] slub: Extend init_on_free to slab caches with constructors

This is the remaining non-upstream part of SLAB_SANITIZE, which was a
partial port, from Daniel Micay, of the feature from PaX without the
default fast mode based on passing SLAB_NO_SANITIZE in
performance-critical cases that are not particularly security sensitive.

Signed-off-by: Thibaut Sautereau <thibaut.sautereau@ssi.gouv.fr>
Signed-off-by: anupritaisno1 <www.anuprita804@gmail.com>
Signed-off-by: randomhydrosol <randomhydrosol@glassrom.org>
---
 mm/slab.h | 12 +++++++++---
 mm/slub.c | 14 +++++++++++++-
 2 files changed, 22 insertions(+), 4 deletions(-)

diff --git a/mm/slab.h b/mm/slab.h
index 2c73564ee308..853f774b74dd 100644
--- a/mm/slab.h
+++ b/mm/slab.h
@@ -543,9 +543,15 @@ static inline bool slab_want_init_on_alloc(gfp_t flags, struct kmem_cache *c)
 
 static inline bool slab_want_init_on_free(struct kmem_cache *c)
 {
-	if (static_branch_unlikely(&init_on_free))
-		return !(c->ctor ||
-			 (c->flags & (SLAB_TYPESAFE_BY_RCU | SLAB_POISON)));
+	if (static_branch_unlikely(&init_on_free)) {
+#ifndef CONFIG_SLUB
+		if (c->ctor)
+			return false;
+#endif
+		if (c->flags & (SLAB_TYPESAFE_BY_RCU | SLAB_POISON))
+			return false;
+		return true;
+	}
 	return false;
 }
 
diff --git a/mm/slub.c b/mm/slub.c
index 1aa40b8b4345..e275b36ec0a1 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -1465,7 +1465,8 @@ static inline bool slab_free_freelist_hook(struct kmem_cache *s,
 							   : 0;
 			memset((char *)object + s->inuse, 0,
 			       s->size - s->inuse - rsize);
-
+			if (s->ctor)
+				s->ctor(object);
 		}
 		/* If object's reuse doesn't have to be delayed */
 		if (!slab_free_hook(s, object)) {
@@ -1474,6 +1475,17 @@ static inline bool slab_free_freelist_hook(struct kmem_cache *s,
 			*head = object;
 			if (!*tail)
 				*tail = object;
+		} else if (slab_want_init_on_free(s) && s->ctor) {
+			/* Objects that are put into quarantine by KASAN will
+			 * still undergo free_consistency_checks() and thus
+			 * need to show a valid freepointer to check_object().
+			 *
+			 * Note that doing this for all caches (not just ctor
+			 * ones, which have s->offset != NULL)) causes a GPF,
+			 * due to KASAN poisoning and the way set_freepointer()
+			 * eventually dereferences the freepointer.
+			 */
+			set_freepointer(s, object, NULL);
 		}
 	} while (object != old_tail);
 
