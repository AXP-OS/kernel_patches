From d0086d2abefad0dcd4087bf982004d4ed90423b3 Mon Sep 17 00:00:00 2001
From: Daniel Micay <danielmicay@gmail.com>
Date: Wed, 3 May 2017 21:54:56 -0400
Subject: [PATCH] mm: add support for verifying page sanitization

Signed-off-by: Daniel Micay <danielmicay@gmail.com>
Signed-off-by: Thibaut Sautereau <thibaut.sautereau@ssi.gouv.fr>
Signed-off-by: Levente Polyak <levente@leventepolyak.net>
Signed-off-by: anupritaisno1 <www.anuprita804@gmail.com>
Signed-off-by: randomhydrosol <randomhydrosol@glassrom.org>
---
 include/linux/highmem.h    | 7 +++++++
 mm/page_alloc.c            | 6 ++++++
 security/Kconfig.hardening | 7 +++++++
 3 files changed, 20 insertions(+)

diff --git a/include/linux/highmem.h b/include/linux/highmem.h
index e6cf2af62187..cd9a1e148ef4 100644
--- a/include/linux/highmem.h
+++ b/include/linux/highmem.h
@@ -203,6 +203,13 @@ static inline void clear_highpage(struct page *page)
 	kunmap_atomic(kaddr);
 }
 
+static inline void verify_zero_highpage(struct page *page)
+{
+	void *kaddr = kmap_atomic(page);
+	BUG_ON(memchr_inv(kaddr, 0, PAGE_SIZE));
+	kunmap_atomic(kaddr);
+}
+
 static inline void zero_user_segments(struct page *page,
 	unsigned start1, unsigned end1,
 	unsigned start2, unsigned end2)
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 002c604620f6..a49413df7189 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -2020,6 +2020,12 @@ static void prep_new_page(struct page *page, unsigned int order, gfp_t gfp_flags
 {
 	post_alloc_hook(page, order, gfp_flags);
 
+	if (IS_ENABLED(CONFIG_PAGE_SANITIZE_VERIFY) && want_init_on_free()) {
+		int i;
+		for (i = 0; i < (1 << order); i++)
+			verify_zero_highpage(page + i);
+	}
+
 	if (!free_pages_prezeroed() && want_init_on_alloc(gfp_flags))
 		kernel_init_free_pages(page, 1 << order);
 
diff --git a/security/Kconfig.hardening b/security/Kconfig.hardening
index 234250ce0b6c..0d037ed7abec 100644
--- a/security/Kconfig.hardening
+++ b/security/Kconfig.hardening
@@ -130,6 +130,13 @@ config INIT_ON_FREE_DEFAULT_ON
 	  touching "cold" memory areas. Most cases see 3-5% impact. Some
 	  synthetic workloads have measured as high as 8%.
 
+config PAGE_SANITIZE_VERIFY
+	bool "Verify sanitized pages"
+	default y
+	help
+	  When init_on_free is enabled, verify that newly allocated pages
+	  are zeroed to detect write-after-free bugs.
+
 endmenu
 
 endmenu
