From dd33f069310c1230b3662780a0826fafbb0c693f Mon Sep 17 00:00:00 2001
From: Daniel Micay <danielmicay@gmail.com>
Date: Wed, 3 May 2017 21:20:55 -0400
Subject: [PATCH] add simpler page sanitization

The upstream option requires non-trivial debug infrastructure, so use
something more like the earlier PaX implementation.

Signed-off-by: Daniel Micay <danielmicay@gmail.com>
---
 mm/page_alloc.c  | 9 ++++++++-
 security/Kconfig | 8 ++++++++
 2 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 18e72c2335a7..a7c9b0a0aff8 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -1045,6 +1045,13 @@ static bool free_pages_prepare(struct page *page, unsigned int order)
 		debug_check_no_obj_freed(page_address(page),
 					   PAGE_SIZE << order);
 	}
+
+	if (IS_ENABLED(CONFIG_PAGE_SANITIZE)) {
+		int i;
+		for (i = 0; i < (1 << order); i++)
+			clear_highpage(page + i);
+	}
+
 	arch_free_page(page, order);
 	kernel_map_pages(page, 1 << order, 0);
 	kasan_free_pages(page, order);
@@ -1448,7 +1455,7 @@ static int prep_new_page(struct page *page, unsigned int order, gfp_t gfp_flags,
 	arch_alloc_page(page, order);
 	kernel_map_pages(page, 1 << order, 1);
 
-	if (gfp_flags & __GFP_ZERO)
+	if (!IS_ENABLED(CONFIG_PAGE_SANITIZE) && (gfp_flags & __GFP_ZERO))
 		for (i = 0; i < (1 << order); i++)
 			clear_highpage(page + i);
 
diff --git a/security/Kconfig b/security/Kconfig
index 0e8a0f005b08..1df261041e44 100644
--- a/security/Kconfig
+++ b/security/Kconfig
@@ -189,6 +189,14 @@ config FORTIFY_SOURCE
 	  Detect overflows of buffers in common string and memory functions
 	  where the compiler can determine and validate the buffer sizes.
 
+config PAGE_SANITIZE
+	bool "Sanitize pages"
+	depends on !HIBERNATION
+	default y
+	help
+	  Zero fill page allocations on free, reducing the lifetime of
+	  sensitive data and helping to mitigate use-after-free bugs.
+
 source security/selinux/Kconfig
 source security/smack/Kconfig
 source security/tomoyo/Kconfig
