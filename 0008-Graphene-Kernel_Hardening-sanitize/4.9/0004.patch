From 9cffbbe17bc708a4bd5cc9f2d60bba6c8e805fc1 Mon Sep 17 00:00:00 2001
From: Daniel Micay <danielmicay@gmail.com>
Date: Wed, 3 May 2017 21:54:56 -0400
Subject: [PATCH] add support for verifying page sanitization

Signed-off-by: Daniel Micay <danielmicay@gmail.com>
Signed-off-by: anupritaisno1 <www.anuprita804@gmail.com>
---
 include/linux/highmem.h | 7 +++++++
 mm/page_alloc.c         | 5 +++++
 security/Kconfig        | 8 ++++++++
 3 files changed, 20 insertions(+)

diff --git a/include/linux/highmem.h b/include/linux/highmem.h
index 657b56524a8a..f7a8e921b34a 100644
--- a/include/linux/highmem.h
+++ b/include/linux/highmem.h
@@ -217,6 +217,13 @@ static inline void clear_highpage(struct page *page)
 	kunmap_atomic(kaddr);
 }
 
+static inline void verify_zero_highpage(struct page *page)
+{
+	void *kaddr = kmap_atomic(page);
+	BUG_ON(memchr_inv(kaddr, 0, PAGE_SIZE));
+	kunmap_atomic(kaddr);
+}
+
 static inline void zero_user_segments(struct page *page,
 	unsigned start1, unsigned end1,
 	unsigned start2, unsigned end2)
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 59d6e42f9772..68df934b1493 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -1798,6 +1798,11 @@ static void prep_new_page(struct page *page, unsigned int order, gfp_t gfp_flags
 
 	post_alloc_hook(page, order, gfp_flags);
 
+	if (IS_ENABLED(CONFIG_PAGE_SANITIZE_VERIFY)) {
+		for (i = 0; i < (1 << order); i++)
+			verify_zero_highpage(page + i);
+	}
+
 	if (!free_pages_prezeroed() && (gfp_flags & __GFP_ZERO))
 		for (i = 0; i < (1 << order); i++)
 			clear_highpage(page + i);
diff --git a/security/Kconfig b/security/Kconfig
index 0fb26352fc64..6cfcf9fedc34 100644
--- a/security/Kconfig
+++ b/security/Kconfig
@@ -201,6 +201,14 @@ config PAGE_SANITIZE
 	  Zero fill page allocations on free, reducing the lifetime of
 	  sensitive data and helping to mitigate use-after-free bugs.
 
+config PAGE_SANITIZE_VERIFY
+	bool "Verify sanitized pages"
+	depends on PAGE_SANITIZE
+	default y
+	help
+	  Verify that newly allocated pages are zeroed to detect
+	  write-after-free bugs.
+
 source security/selinux/Kconfig
 source security/smack/Kconfig
 source security/tomoyo/Kconfig
