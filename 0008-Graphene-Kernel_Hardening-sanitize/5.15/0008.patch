From a394338c5d532a08c5a6e74eb0baeaef198b1301 Mon Sep 17 00:00:00 2001
From: Daniel Micay <danielmicay@gmail.com>
Date: Wed, 3 May 2017 21:54:56 -0400
Subject: [PATCH] mm: add support for verifying page sanitization

Signed-off-by: Daniel Micay <danielmicay@gmail.com>
Signed-off-by: anupritaisno1 <www.anuprita804@gmail.com>
Signed-off-by: randomhydrosol <randomhydrosol@glassrom.org>
---
 include/linux/highmem.h    | 8 ++++++++
 mm/page_alloc.c            | 6 ++++++
 security/Kconfig.hardening | 7 +++++++
 3 files changed, 21 insertions(+)

diff --git a/include/linux/highmem.h b/include/linux/highmem.h
index 371946c070dc5..b34df0a5aa9be 100644
--- a/include/linux/highmem.h
+++ b/include/linux/highmem.h
@@ -198,6 +198,14 @@ static inline void tag_clear_highpage(struct page *page)
 void zero_user_segments(struct page *page, unsigned start1, unsigned end1,
 		unsigned start2, unsigned end2);
 #else /* !HIGHMEM || !TRANSPARENT_HUGEPAGE */
+
+static inline void verify_zero_highpage(struct page *page)
+{
+	void *kaddr = kmap_atomic(page);
+	BUG_ON(memchr_inv(kaddr, 0, PAGE_SIZE));
+	kunmap_atomic(kaddr);
+}
+
 static inline void zero_user_segments(struct page *page,
 		unsigned start1, unsigned end1,
 		unsigned start2, unsigned end2)
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index c1f7504f77009..c583b97ad4790 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -2500,6 +2500,12 @@ static void prep_new_page(struct page *page, unsigned int order, gfp_t gfp_flags
 {
 	post_alloc_hook(page, order, gfp_flags);
 
+	if (IS_ENABLED(CONFIG_PAGE_SANITIZE_VERIFY) && want_init_on_free()) {
+		int i;
+		for (i = 0; i < (1 << order); i++)
+			verify_zero_highpage(page + i);
+	}
+
 	if (order && (gfp_flags & __GFP_COMP))
 		prep_compound_page(page, order);
 
diff --git a/security/Kconfig.hardening b/security/Kconfig.hardening
index 942ed8de36d35..8fd6e75018790 100644
--- a/security/Kconfig.hardening
+++ b/security/Kconfig.hardening
@@ -257,6 +257,13 @@ config ZERO_CALL_USED_REGS
 	  be evaluated for suitability. For example, x86_64 grows by less
 	  than 1%, and arm64 grows by about 5%.
 
+config PAGE_SANITIZE_VERIFY
+	bool "Verify sanitized pages"
+	default y
+	help
+	  When init_on_free is enabled, verify that newly allocated pages
+	  are zeroed to detect write-after-free bugs.
+
 endmenu
 
 endmenu
