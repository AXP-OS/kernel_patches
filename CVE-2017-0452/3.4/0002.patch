From 5b387c4bf59e82e028fe357414578e3c12430d6b Mon Sep 17 00:00:00 2001
From: Ariel Yin <ayin@google.com>
Date: Fri, 13 Jan 2017 13:58:56 -0800
Subject: [PATCH] msm: vidc: WARN_ON() reveals fuction addresses

There is a security vulnerability where function addresses are
printed in kernel message if WARN_ON() is invoked implicitly.
WARN_ON() call is made explicit to avoid this issue.

Bug: 32873615
CRs-Fixed: 1093693
Change-Id: If75581803adf62cb9bda3784ad1d4f4088e0d797
Signed-off-by: Sanjay Singh <sisanj@codeaurora.org>
Signed-off-by: Biswajit Paul <biswajitpaul@codeaurora.org>
Signed-off-by: Kevin F. Haggerty <haggertk@lineageos.org>
---
 drivers/media/platform/msm/vidc/venus_hfi.c | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/drivers/media/platform/msm/vidc/venus_hfi.c b/drivers/media/platform/msm/vidc/venus_hfi.c
index faadacb7e93..05aa168e622 100644
--- a/drivers/media/platform/msm/vidc/venus_hfi.c
+++ b/drivers/media/platform/msm/vidc/venus_hfi.c
@@ -1398,7 +1398,8 @@ static inline int venus_hfi_power_on(struct venus_hfi_device *device)
 	 * recursive lock in cmdq_write function, call nolock version
 	 * of alloc_ocmem
 	 */
-	WARN_ON(!mutex_is_locked(&device->write_lock));
+	WARN_ON(!mutex_is_locked(&device->write_lock)
+					&& (msm_vidc_debug & VIDC_INFO));
 	rc = __alloc_set_ocmem(device, false);
 	if (rc) {
 		dprintk(VIDC_ERR, "Failed to allocate OCMEM");
@@ -3318,7 +3319,8 @@ static inline void venus_hfi_disable_unprepare_clks(
 		return;
 	}
 
-	WARN_ON(!mutex_is_locked(&device->clk_pwr_lock));
+	WARN_ON(!mutex_is_locked(&device->clk_pwr_lock)
+					&& (msm_vidc_debug & VIDC_INFO));
 	/*
 	* Make the clock state variable as unprepared before actually
 	* unpreparing clocks. This will make sure that when we check
@@ -3373,7 +3375,8 @@ static inline int venus_hfi_prepare_enable_clks(struct venus_hfi_device *device)
 		dprintk(VIDC_ERR, "Invalid params: %pK\n", device);
 		return -EINVAL;
 	}
-	WARN_ON(!mutex_is_locked(&device->clk_pwr_lock));
+	WARN_ON(!mutex_is_locked(&device->clk_pwr_lock)
+					&& (msm_vidc_debug & VIDC_INFO));
 
 	if (device->clk_state == ENABLED_PREPARED) {
 		dprintk(VIDC_DBG, "Clocks already prepared and enabled\n");
