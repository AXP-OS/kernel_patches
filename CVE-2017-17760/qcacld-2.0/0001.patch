From 71331327ac389bff7d5af2707c4325e5b7949013 Mon Sep 17 00:00:00 2001
From: Sridhar Selvaraj <sselvara@codeaurora.org>
Date: Mon, 31 Jul 2017 20:18:00 +0530
Subject: qcacld-2.0: Change local variables to dynamic in limProcessAuthFrame

Currently limProcessAuthFrame stack frame size exceeds 1024 and causes
build failures for 32 bit platforms.

Move multiple variables from local to dynamic allocation to reduce the
frame size of limProcessAuthFrame

Change-Id: I83cf5ab24693e0ce012894d808ac79bf37fa9a08
CRs-Fixed: 2082544
---
 CORE/MAC/src/pe/lim/limProcessAuthFrame.c | 352 +++++++++++++++++-------------
 1 file changed, 202 insertions(+), 150 deletions(-)
 mode change 100755 => 100644 CORE/MAC/src/pe/lim/limProcessAuthFrame.c

diff --git a/CORE/MAC/src/pe/lim/limProcessAuthFrame.c b/CORE/MAC/src/pe/lim/limProcessAuthFrame.c
old mode 100755
new mode 100644
index 2610b69..0a31622
--- a/CORE/MAC/src/pe/lim/limProcessAuthFrame.c
+++ b/CORE/MAC/src/pe/lim/limProcessAuthFrame.c
@@ -147,11 +147,13 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
 {
     tANI_U8                 *pBody, keyId, cfgPrivacyOptImp,
                             defaultKey[SIR_MAC_KEY_LENGTH],
-                            encrAuthFrame[LIM_ENCR_AUTH_BODY_LEN],
-                            plainBody[256];
+                            *encrAuthFrame = NULL,
+                            *plainBody = NULL;
     tANI_U16                frameLen;
     tANI_U32                maxNumPreAuth, val;
-    tSirMacAuthFrameBody    *pRxAuthFrameBody, rxAuthFrame, authFrame;
+    tSirMacAuthFrameBody    *pRxAuthFrameBody,
+                            *rxAuthFrame = NULL,
+                            *authFrame = NULL;
     tpSirMacMgmtHdr         pHdr;
     tCfgWepKeyEntry         *pKeyMapEntry = NULL;
     struct tLimPreAuthNode  *pAuthNode;
@@ -159,7 +161,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
     tANI_U8                 decryptResult;
     tANI_U8                 *pChallenge;
     tANI_U32                key_length=8;
-    tANI_U8                 challengeTextArray[SIR_MAC_AUTH_CHALLENGE_LENGTH];
+    tANI_U8                 *challengeTextArray = NULL;
     tpDphHashNode           pStaDs = NULL;
     tANI_U16                assocId = 0;
     tANI_U16                currSeqNum = 0;
@@ -208,6 +210,42 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                           psessionEntry->defaultAuthFailureTimeout, NULL, eANI_BOOLEAN_FALSE);
     }
 
+    rxAuthFrame = vos_mem_malloc(sizeof(tSirMacAuthFrameBody));
+    if (!rxAuthFrame) {
+        limLog(pMac, LOGE, FL("Failed to allocate memory"));
+        return;
+    }
+
+    authFrame = vos_mem_malloc(sizeof(tSirMacAuthFrameBody));
+    if (!authFrame) {
+        limLog(pMac, LOGE, FL("failed to allocate memory"));
+        goto free;
+    }
+
+    encrAuthFrame = vos_mem_malloc(LIM_ENCR_AUTH_BODY_LEN);
+    if (!encrAuthFrame) {
+        limLog(pMac, LOGE, FL("failed to allocate memory"));
+        goto free;
+    }
+
+    plainBody = vos_mem_malloc(LIM_ENCR_AUTH_BODY_LEN);
+    if (!plainBody) {
+        limLog(pMac, LOGE, FL("failed to allocate memory"));
+        goto free;
+    }
+
+    challengeTextArray = vos_mem_malloc(SIR_MAC_AUTH_CHALLENGE_LENGTH);
+    if(!challengeTextArray) {
+        limLog(pMac, LOGE, FL("failed to allocate memory"));
+        goto free;
+    }
+
+    vos_mem_set(rxAuthFrame, sizeof(tSirMacAuthFrameBody), 0);
+    vos_mem_set(authFrame, sizeof(tSirMacAuthFrameBody), 0);
+    vos_mem_set(encrAuthFrame, LIM_ENCR_AUTH_BODY_LEN, 0);
+    vos_mem_set(plainBody, LIM_ENCR_AUTH_BODY_LEN, 0);
+    vos_mem_set(challengeTextArray, SIR_MAC_AUTH_CHALLENGE_LENGTH, 0);
+
     /// Determine if WEP bit is set in the FC or received MAC header
     if (pHdr->fc.wep)
     {
@@ -224,7 +262,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
 
             limSendDeauthMgmtFrame( pMac, eSIR_MAC_MIC_FAILURE_REASON,
                                     pHdr->sa, psessionEntry, FALSE );
-            return;
+            goto free;
         }
 
         // Extract key ID from IV (most 2 bits of 4th byte of IV)
@@ -242,21 +280,21 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
 
         if (LIM_IS_STA_ROLE(psessionEntry) ||
             LIM_IS_BT_AMP_STA_ROLE(psessionEntry)) {
-            authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-            authFrame.authTransactionSeqNumber = SIR_MAC_AUTH_FRAME_4;
-            authFrame.authStatusCode = eSIR_MAC_CHALLENGE_FAILURE_STATUS;
+            authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+            authFrame->authTransactionSeqNumber = SIR_MAC_AUTH_FRAME_4;
+            authFrame->authStatusCode = eSIR_MAC_CHALLENGE_FAILURE_STATUS;
             // Log error
             PELOGE(limLog(pMac, LOGE,
                    FL("received Authentication frame with wep bit set on role=%d"
                    MAC_ADDRESS_STR), GET_LIM_SYSTEM_ROLE(psessionEntry),
                    MAC_ADDR_ARRAY(pHdr->sa));)
 
-            limSendAuthMgmtFrame(pMac, &authFrame,
+            limSendAuthMgmtFrame(pMac, authFrame,
                                  pHdr->sa,
                                  LIM_NO_WEP_IN_FC,
                                  psessionEntry,
                                  eSIR_FALSE);
-            return;
+            goto free;
         }
 
         if (frameLen < LIM_ENCR_AUTH_BODY_LEN)
@@ -267,7 +305,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                    frameLen);
             limPrintMacAddr(pMac, pHdr->sa, LOGE);
 
-            return;
+            goto free;
         }
         if (LIM_IS_AP_ROLE(psessionEntry)) {
             val = psessionEntry->privacy;
@@ -307,18 +345,18 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                  * an Authentication frame with FC bit set.
                  * Send Auth frame4 with 'out of sequence' status code.
                  */
-                authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                authFrame.authTransactionSeqNumber =
+                authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                authFrame->authTransactionSeqNumber =
                 SIR_MAC_AUTH_FRAME_4;
-                authFrame.authStatusCode =
+                authFrame->authStatusCode =
                 eSIR_MAC_AUTH_FRAME_OUT_OF_SEQ_STATUS;
 
-                limSendAuthMgmtFrame(pMac, &authFrame,
+                limSendAuthMgmtFrame(pMac, authFrame,
                                      pHdr->sa,
                                      LIM_NO_WEP_IN_FC,
                                      psessionEntry,
                                      eSIR_FALSE);
-                return;
+                goto free;
             }
             else
             {
@@ -345,18 +383,18 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * out of sequence Auth frame status code.
                      */
 
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                     SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                     eSIR_MAC_AUTH_FRAME_OUT_OF_SEQ_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,
                                          psessionEntry,
                                          eSIR_FALSE);
-                    return;
+                    goto free;
                 }
             }
 
@@ -379,18 +417,18 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * Send Authentication frame
                      * with challenge failure status code
                      */
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                     SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                     eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,
                                          psessionEntry,
                                          eSIR_FALSE);
-                    return;
+                    goto free;
                 } // if (!pKeyMapEntry->wepOn)
                 else
                 {
@@ -408,30 +446,30 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
 
                         limDeletePreAuthNode(pMac,
                                              pHdr->sa);
-                        authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                        authFrame.authTransactionSeqNumber =
+                        authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                        authFrame->authTransactionSeqNumber =
                         SIR_MAC_AUTH_FRAME_4;
-                        authFrame.authStatusCode =
+                        authFrame->authStatusCode =
                         eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
                         limSendAuthMgmtFrame(
-                                            pMac, &authFrame,
+                                            pMac, authFrame,
                                             pHdr->sa,
                                             LIM_NO_WEP_IN_FC,
                                             psessionEntry,
                                             eSIR_FALSE);
 
 
-                        return;
+                        goto free;
                     }
 
                     if ((sirConvertAuthFrame2Struct(pMac, plainBody, frameLen-8,
-                         &rxAuthFrame)!=eSIR_SUCCESS ) ||
-                        ( !isAuthValid(pMac, &rxAuthFrame,psessionEntry)))
+                         rxAuthFrame)!=eSIR_SUCCESS ) ||
+                        ( !isAuthValid(pMac, rxAuthFrame,psessionEntry)))
                     {
                         PELOGE(limLog(pMac, LOGE, FL(
                                "failed to convert Auth Frame to structure or Auth is not valid "));)
-                        return;
+                        goto free;
                     }
                 } // end if (pKeyMapEntry->key == NULL)
             } // if keyMappings has entry
@@ -458,19 +496,19 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * with challenge failure status code
                      */
 
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                     SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                     eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,
                                          psessionEntry,
                                          eSIR_FALSE);
 
-                    return;
+                    goto free;
                 }
 
                     key_length=val;
@@ -489,14 +527,14 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                        /// ICV failure
                         limDeletePreAuthNode(pMac,
                                              pHdr->sa);
-                        authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                        authFrame.authTransactionSeqNumber =
+                        authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                        authFrame->authTransactionSeqNumber =
                         SIR_MAC_AUTH_FRAME_4;
-                        authFrame.authStatusCode =
+                        authFrame->authStatusCode =
                         eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
                         limSendAuthMgmtFrame(
-                                            pMac, &authFrame,
+                                            pMac, authFrame,
                                             pHdr->sa,
                                             LIM_NO_WEP_IN_FC,
                                             psessionEntry,
@@ -504,12 +542,12 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                         return;
                     }
                     if ( ( sirConvertAuthFrame2Struct(pMac, plainBody, frameLen-8,
-                          &rxAuthFrame)!=eSIR_SUCCESS ) ||
-                        ( !isAuthValid(pMac, &rxAuthFrame, psessionEntry) ) )
+                          rxAuthFrame)!=eSIR_SUCCESS ) ||
+                        ( !isAuthValid(pMac, rxAuthFrame, psessionEntry) ) )
                     {
                         limLog(pMac, LOGE,
                                FL("failed to convert Auth Frame to structure or Auth is not valid "));
-                        return;
+                        goto free;
                     }
             } // End of check for Key Mapping/Default key presence
         }
@@ -528,36 +566,36 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
              * should have been 'unsupported algorithm' status code.
              */
 
-            authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-            authFrame.authTransactionSeqNumber =
+            authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+            authFrame->authTransactionSeqNumber =
             SIR_MAC_AUTH_FRAME_4;
-            authFrame.authStatusCode =
+            authFrame->authStatusCode =
             eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
-            limSendAuthMgmtFrame(pMac, &authFrame,
+            limSendAuthMgmtFrame(pMac, authFrame,
                                  pHdr->sa,
                                  LIM_NO_WEP_IN_FC,
                                  psessionEntry,
                                  eSIR_FALSE);
-            return;
+            goto free;
         } // else if (wlan_cfgGetInt(CFG_PRIVACY_OPTION_IMPLEMENTED))
     } // if (fc.wep)
     else
     {
         if ( ( sirConvertAuthFrame2Struct(pMac, pBody,
-            frameLen, &rxAuthFrame)!=eSIR_SUCCESS ) ||
-            ( !isAuthValid(pMac, &rxAuthFrame,psessionEntry) ) )
+            frameLen, rxAuthFrame)!=eSIR_SUCCESS ) ||
+            ( !isAuthValid(pMac, rxAuthFrame,psessionEntry) ) )
         {
             PELOGE(limLog(pMac, LOGE,
                    FL("failed to convert Auth Frame to structure or Auth is not valid "));)
-            return;
+            goto free;
         }
     }
 
 
-    pRxAuthFrameBody = &rxAuthFrame;
+    pRxAuthFrameBody = rxAuthFrame;
 
-   PELOGW(limLog(pMac, LOGW,
+    PELOGW(limLog(pMac, LOGW,
            FL("Received Auth frame with type=%d seqnum=%d, status=%d (%d)"),
            (tANI_U32) pRxAuthFrameBody->authAlgoNumber,
            (tANI_U32) pRxAuthFrameBody->authTransactionSeqNumber,
@@ -640,7 +678,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                     limSendDeauthMgmtFrame(pMac, eSIR_MAC_UNSPEC_FAILURE_REASON,
                             (tANI_U8 *) pHdr->sa, psessionEntry, FALSE);
                     limTriggerSTAdeletion(pMac, pStaDs, psessionEntry);
-                    return;
+                    goto free;
                 }
             }
 
@@ -702,7 +740,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                         limSendDeauthMgmtFrame(pMac,
                                eSIR_MAC_UNSPEC_FAILURE_REASON, (tANI_U8 *) pAuthNode->peerMacAddr, psessionEntry, FALSE);
                         limTriggerSTAdeletion(pMac, pStaDs, psessionEntry);
-                        return;
+                        goto free;
                     }
                 }
                 else
@@ -713,7 +751,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * in transmission queue
                      * */
                     PELOGE(limLog(pMac, LOGE, FL("STA is initiating Authentication after ACK lost..."));)
-                    return;
+                    goto free;
                 }
             }
             if (wlan_cfgGetInt(pMac, WNI_CFG_MAX_NUM_PRE_AUTH,
@@ -735,20 +773,20 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                  * reached. Send Authentication frame
                  * with unspecified failure
                  */
-                authFrame.authAlgoNumber =
+                authFrame->authAlgoNumber =
                 pRxAuthFrameBody->authAlgoNumber;
-                authFrame.authTransactionSeqNumber =
+                authFrame->authTransactionSeqNumber =
                 pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                authFrame.authStatusCode =
+                authFrame->authStatusCode =
                 eSIR_MAC_UNSPEC_FAILURE_STATUS;
 
-                limSendAuthMgmtFrame(pMac, &authFrame,
+                limSendAuthMgmtFrame(pMac, authFrame,
                                      pHdr->sa,
                                      LIM_NO_WEP_IN_FC,
                                      psessionEntry,
                                      eSIR_FALSE);
 
-                return;
+                goto free;
             }
             /// No Pre-auth context exists for the STA.
             if (limIsAuthAlgoSupported(
@@ -768,8 +806,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                             limLog(pMac, LOGW,
                                    FL("Max pre-auth nodes reached "));
                             limPrintMacAddr(pMac, pHdr->sa, LOGW);
-
-                            return;
+                            goto free;
                         }
 
                         PELOG1(limLog(pMac, LOG1, FL("Alloc new data: %x peer "), pAuthNode);
@@ -795,13 +832,13 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                          * status code.
                          */
 
-                        authFrame.authAlgoNumber =
+                        authFrame->authAlgoNumber =
                         pRxAuthFrameBody->authAlgoNumber;
-                        authFrame.authTransactionSeqNumber =
+                        authFrame->authTransactionSeqNumber =
                         pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                        authFrame.authStatusCode = eSIR_MAC_SUCCESS_STATUS;
+                        authFrame->authStatusCode = eSIR_MAC_SUCCESS_STATUS;
                         limSendAuthMgmtFrame(
-                                            pMac, &authFrame,
+                                            pMac, authFrame,
                                             pHdr->sa,
                                             LIM_NO_WEP_IN_FC,
                                             psessionEntry,
@@ -851,20 +888,20 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                              * code.
                              */
 
-                            authFrame.authAlgoNumber =
+                            authFrame->authAlgoNumber =
                             pRxAuthFrameBody->authAlgoNumber;
-                            authFrame.authTransactionSeqNumber =
+                            authFrame->authTransactionSeqNumber =
                             pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                            authFrame.authStatusCode =
+                            authFrame->authStatusCode =
                             eSIR_MAC_AUTH_ALGO_NOT_SUPPORTED_STATUS;
 
                             limSendAuthMgmtFrame(
-                                                pMac, &authFrame,
+                                                pMac, authFrame,
                                                 pHdr->sa,
                                                 LIM_NO_WEP_IN_FC,
                                                 psessionEntry,
                                                 eSIR_FALSE);
-                            return;
+                            goto free;
                         }
                         else
                         {
@@ -878,7 +915,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                        FL("Max pre-auth nodes reached "));
                                 limPrintMacAddr(pMac, pHdr->sa, LOGW);
 
-                                return;
+                                goto free;
                             }
 
                             vos_mem_copy((tANI_U8 *) pAuthNode->peerMacAddr,
@@ -916,32 +953,34 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                  * unspecified failure status code.
                                  */
 
-                                authFrame.authAlgoNumber =
+                                authFrame->authAlgoNumber =
                                         pRxAuthFrameBody->authAlgoNumber;
-                                authFrame.authTransactionSeqNumber =
+                                authFrame->authTransactionSeqNumber =
                                         pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                                authFrame.authStatusCode =
+                                authFrame->authStatusCode =
                                         eSIR_MAC_UNSPEC_FAILURE_STATUS;
 
-                                limSendAuthMgmtFrame(pMac, &authFrame,
+                                limSendAuthMgmtFrame(pMac, authFrame,
                                                      pHdr->sa,
                                                      LIM_NO_WEP_IN_FC,
                                                      psessionEntry,
                                                      eSIR_FALSE);
 
                                 limDeletePreAuthNode(pMac, pHdr->sa);
-                                return;
+                                goto free;
                             }
 
                             limActivateAuthRspTimer(pMac, pAuthNode);
 
                             pAuthNode->fTimerStarted = 1;
 
-                            // get random bytes and use as
-                            // challenge text. If it fails we already have random stack bytes.
+                            /*
+                             * get random bytes and use as challenge text
+                             */
                             if( !VOS_IS_STATUS_SUCCESS( vos_rand_get_bytes( 0, (tANI_U8 *)challengeTextArray, SIR_MAC_AUTH_CHALLENGE_LENGTH ) ) )
                             {
                                limLog(pMac, LOGE,FL("Challenge text preparation failed in limProcessAuthFrame"));
+                               goto free;
                             }
 
                             pChallenge = pAuthNode->challengeText;
@@ -954,20 +993,20 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                              * Sending Authenticaton frame with challenge.
                              */
 
-                            authFrame.authAlgoNumber =
+                            authFrame->authAlgoNumber =
                             pRxAuthFrameBody->authAlgoNumber;
-                            authFrame.authTransactionSeqNumber =
+                            authFrame->authTransactionSeqNumber =
                             pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                            authFrame.authStatusCode =
+                            authFrame->authStatusCode =
                             eSIR_MAC_SUCCESS_STATUS;
-                            authFrame.type   = SIR_MAC_CHALLENGE_TEXT_EID;
-                            authFrame.length = SIR_MAC_AUTH_CHALLENGE_LENGTH;
-                            vos_mem_copy(authFrame.challengeText,
+                            authFrame->type   = SIR_MAC_CHALLENGE_TEXT_EID;
+                            authFrame->length = SIR_MAC_AUTH_CHALLENGE_LENGTH;
+                            vos_mem_copy(authFrame->challengeText,
                                          pAuthNode->challengeText,
                                          SIR_MAC_AUTH_CHALLENGE_LENGTH);
 
                             limSendAuthMgmtFrame(
-                                                pMac, &authFrame,
+                                                pMac, authFrame,
                                                 pHdr->sa,
                                                 LIM_NO_WEP_IN_FC,
                                                 psessionEntry,
@@ -991,20 +1030,20 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                          * with auth algorithm not supported status code
                          */
 
-                        authFrame.authAlgoNumber =
+                        authFrame->authAlgoNumber =
                         pRxAuthFrameBody->authAlgoNumber;
-                        authFrame.authTransactionSeqNumber =
+                        authFrame->authTransactionSeqNumber =
                         pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                        authFrame.authStatusCode =
+                        authFrame->authStatusCode =
                         eSIR_MAC_AUTH_ALGO_NOT_SUPPORTED_STATUS;
 
                         limSendAuthMgmtFrame(
-                                            pMac, &authFrame,
+                                            pMac, authFrame,
                                             pHdr->sa,
                                             LIM_NO_WEP_IN_FC,
                                             psessionEntry,
                                             eSIR_FALSE);
-                        return;
+                        goto free;
                 } // end switch(pRxAuthFrameBody->authAlgoNumber)
             } // if (limIsAuthAlgoSupported(pRxAuthFrameBody->authAlgoNumber))
             else
@@ -1020,19 +1059,19 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                  * authentication algorithm requested by sending party.
                  * Reject Authentication with StatusCode=13.
                  */
-                authFrame.authAlgoNumber =
+                authFrame->authAlgoNumber =
                 pRxAuthFrameBody->authAlgoNumber;
-                authFrame.authTransactionSeqNumber =
+                authFrame->authTransactionSeqNumber =
                 pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                authFrame.authStatusCode =
+                authFrame->authStatusCode =
                 eSIR_MAC_AUTH_ALGO_NOT_SUPPORTED_STATUS;
 
-                limSendAuthMgmtFrame(pMac, &authFrame,
+                limSendAuthMgmtFrame(pMac, authFrame,
                                      pHdr->sa,
                                      LIM_NO_WEP_IN_FC,
                                      psessionEntry,
                                      eSIR_FALSE);
-                return;
+                goto free;
             } //end if (limIsAuthAlgoSupported(pRxAuthFrameBody->authAlgoNumber))
             break;
 
@@ -1083,7 +1122,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                     PELOG1(limPrintMacAddr(pMac, pHdr->sa, LOG1);)
                 }
 
-                return;
+                goto free;
 
             }
 
@@ -1159,7 +1198,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                FL("Max pre-auth nodes reached "));
                         limPrintMacAddr(pMac, pHdr->sa, LOGW);
 
-                        return;
+                        goto free;
                     }
 
                     PELOG1(limLog(pMac, LOG1, FL("Alloc new data: %x peer "), pAuthNode);)
@@ -1208,19 +1247,19 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                MAC_ADDRESS_STR), pRxAuthFrameBody->authAlgoNumber,
                                MAC_ADDR_ARRAY(pHdr->sa));)
 
-                        authFrame.authAlgoNumber =
+                        authFrame->authAlgoNumber =
                         pRxAuthFrameBody->authAlgoNumber;
-                        authFrame.authTransactionSeqNumber =
+                        authFrame->authTransactionSeqNumber =
                         pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                        authFrame.authStatusCode =
+                        authFrame->authStatusCode =
                         eSIR_MAC_AUTH_ALGO_NOT_SUPPORTED_STATUS;
 
-                        limSendAuthMgmtFrame(pMac, &authFrame,
+                        limSendAuthMgmtFrame(pMac, authFrame,
                                             pHdr->sa,
                                             LIM_NO_WEP_IN_FC,
                                             psessionEntry,
                                             eSIR_FALSE);
-                        return;
+                        goto free;
                     }
                     else
                     {
@@ -1232,7 +1271,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                             PELOGE(limLog(pMac, LOGE,
                                    FL("received Auth frame with invalid challenge text IE"));)
 
-                            return;
+                            goto free;
                         }
 
                         /**
@@ -1256,14 +1295,14 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                  * Send Auth frame with
                                  * challenge failure status code
                                  */
-                                authFrame.authAlgoNumber =
+                                authFrame->authAlgoNumber =
                                 pRxAuthFrameBody->authAlgoNumber;
-                                authFrame.authTransactionSeqNumber =
+                                authFrame->authTransactionSeqNumber =
                                 pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                                authFrame.authStatusCode =
+                                authFrame->authStatusCode =
                                 eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
-                                limSendAuthMgmtFrame(pMac, &authFrame,
+                                limSendAuthMgmtFrame(pMac, authFrame,
                                                      pHdr->sa,
                                                      LIM_NO_WEP_IN_FC,
                                                      psessionEntry,
@@ -1272,7 +1311,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                 limRestoreFromAuthState(pMac, eSIR_SME_NO_KEY_MAPPING_KEY_FOR_PEER,
                                                               eSIR_MAC_UNSPEC_FAILURE_REASON,psessionEntry);
 
-                                return;
+                                goto free;
                             } // if (pKeyMapEntry->key == NULL)
                             else
                             {
@@ -1333,15 +1372,15 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                 limLog(pMac, LOGP,
                                        FL("could not retrieve Default key"));
 
-                                authFrame.authAlgoNumber =
+                                authFrame->authAlgoNumber =
                                 pRxAuthFrameBody->authAlgoNumber;
-                                authFrame.authTransactionSeqNumber =
+                                authFrame->authTransactionSeqNumber =
                                 pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                                authFrame.authStatusCode =
+                                authFrame->authStatusCode =
                                 eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
                                 limSendAuthMgmtFrame(
-                                                    pMac, &authFrame,
+                                                    pMac, authFrame,
                                                     pHdr->sa,
                                                     LIM_NO_WEP_IN_FC,
                                                     psessionEntry,
@@ -1420,18 +1459,18 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                  * Shared Key authentication type. Reject with Auth frame4
                  * with 'out of sequence' status code.
                  */
-                authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                authFrame.authTransactionSeqNumber =
+                authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                authFrame->authTransactionSeqNumber =
                 SIR_MAC_AUTH_FRAME_4;
-                authFrame.authStatusCode =
+                authFrame->authStatusCode =
                 eSIR_MAC_AUTH_FRAME_OUT_OF_SEQ_STATUS;
 
-                limSendAuthMgmtFrame(pMac, &authFrame,
+                limSendAuthMgmtFrame(pMac, authFrame,
                                      pHdr->sa,
                                      LIM_NO_WEP_IN_FC,
                                      psessionEntry,
                                      eSIR_FALSE);
-                return;
+                goto free;
             }
 
             if (LIM_IS_AP_ROLE(psessionEntry) ||
@@ -1450,18 +1489,18 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                            MAC_ADDR_ARRAY(pHdr->sa));)
 
                     /// WEP bit is not set in FC of Auth Frame3
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                     SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                     eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,
                                          psessionEntry,
                                          eSIR_FALSE);
-                    return;
+                    goto free;
                 }
 
                 pAuthNode = limSearchPreAuthList(pMac,
@@ -1479,18 +1518,18 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * Send Auth frame4 with 'out of sequence'
                      * status code.
                      */
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                     SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                     eSIR_MAC_AUTH_FRAME_OUT_OF_SEQ_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,
                                          psessionEntry,
                                          eSIR_FALSE);
-                    return;
+                    goto free;
                 }
 
                 if (pAuthNode->mlmState == eLIM_MLM_AUTH_RSP_TIMEOUT_STATE)
@@ -1505,14 +1544,14 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * Reject by sending Auth Frame4 with
                      * Auth respone timeout Status Code.
                      */
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                     SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                     eSIR_MAC_AUTH_RSP_TIMEOUT_STATUS;
 
                     limSendAuthMgmtFrame(
-                                        pMac, &authFrame,
+                                        pMac, authFrame,
                                         pHdr->sa,
                                         LIM_NO_WEP_IN_FC,
                                         psessionEntry,
@@ -1522,7 +1561,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                     limDeletePreAuthNode(pMac,
                                          pHdr->sa);
 
-                    return;
+                    goto free;
                 } // end switch (pAuthNode->mlmState)
 
                 if (pRxAuthFrameBody->authStatusCode != eSIR_MAC_SUCCESS_STATUS)
@@ -1539,7 +1578,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                            MAC_ADDRESS_STR), pRxAuthFrameBody->authStatusCode,
                            MAC_ADDR_ARRAY(pHdr->sa));)
 
-                    return;
+                    goto free;
                 }
 
                 /**
@@ -1564,12 +1603,12 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                     /**
                      * Send Authentication Frame4 with 'success' Status Code.
                      */
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                         SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode = eSIR_MAC_SUCCESS_STATUS;
+                    authFrame->authStatusCode = eSIR_MAC_SUCCESS_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,
                                          psessionEntry,
@@ -1602,19 +1641,19 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * delete STA context.
                      */
 
-                    authFrame.authAlgoNumber =
+                    authFrame->authAlgoNumber =
                         pRxAuthFrameBody->authAlgoNumber;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authTransactionSeqNumber =
                         SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                         eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,
                                          psessionEntry,
                                          eSIR_FALSE);
-                    return;
+                    goto free;
                 }
             } // if (pMac->lim.gLimSystemRole == eLIM_AP_ROLE || ...
 
@@ -1635,7 +1674,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                        MAC_ADDRESS_STR), psessionEntry->limMlmState,
                        MAC_ADDR_ARRAY(pHdr->sa));)
 
-                return;
+                goto free;
             }
 
             if (pRxAuthFrameBody->authAlgoNumber != eSIR_SHARED_KEY)
@@ -1653,7 +1692,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                            MAC_ADDRESS_STR), pRxAuthFrameBody->authAlgoNumber,
                        MAC_ADDR_ARRAY(pHdr->sa));)
 
-                return;
+                goto free;
             }
 
             if ( !vos_mem_compare((tANI_U8 *) pHdr->sa,
@@ -1708,7 +1747,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                            FL("Max pre-auth nodes reached "));
                     limPrintMacAddr(pMac, pHdr->sa, LOGW);
 
-                    return;
+                    goto free;
                 }
                 PELOG1(limLog(pMac, LOG1, FL("Alloc new data: %x peer "), pAuthNode);
                 limPrintMacAddr(pMac, pHdr->sa, LOG1);)
@@ -1756,6 +1795,19 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
 
             break;
     } // end switch (pRxAuthFrameBody->authTransactionSeqNumber)
+
+free:
+    if (authFrame)
+        vos_mem_free(authFrame);
+    if (rxAuthFrame)
+        vos_mem_free(rxAuthFrame);
+    if (encrAuthFrame)
+        vos_mem_free(encrAuthFrame);
+    if (plainBody)
+        vos_mem_free(plainBody);
+    if (challengeTextArray)
+        vos_mem_free(challengeTextArray);
+
 } /*** end limProcessAuthFrame() ***/
 
 
-- 
cgit v1.1

