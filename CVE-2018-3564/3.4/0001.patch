From 09795aa41bb5bba9121591d8a77195bd324541d2 Mon Sep 17 00:00:00 2001
From: Tharun Kumar Merugu <mtharu@codeaurora.org>
Date: Tue, 2 Jan 2018 11:42:45 +0530
Subject: [PATCH] msm: adsprpc: Fix race conditions on same buffer

Variable map may pointing to the same buffer on race conditions
in functions fastrpc_internal_mmap and fastrpc_internal_munmap,
use mutex to avoid race conditions on same buffer.

Bug: 72957546
Change-Id: I96ed884c44a36f574677ba3ba189dfbf2ce3751d
Acked-by: Krishnaiah Tadakamalla <ktadakam@qti.qualcomm.com>
Signed-off-by: Tharun Kumar Merugu <mtharu@codeaurora.org>
[haggertk: Backport to 3.4/msm8974]
CVE-2018-3564
Signed-off-by: Kevin F. Haggerty <haggertk@lineageos.org>
---
 drivers/char/adsprpc.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/drivers/char/adsprpc.c b/drivers/char/adsprpc.c
index 9b3021c8801..c1ec7e49ab6 100644
--- a/drivers/char/adsprpc.c
+++ b/drivers/char/adsprpc.c
@@ -196,6 +196,7 @@ struct file_data {
 	spinlock_t hlock;
 	struct hlist_head hlst;
 	uint32_t mode;
+	struct mutex map_mutex;
 };
 
 struct fastrpc_device {
@@ -1137,6 +1138,7 @@ static int fastrpc_internal_munmap(struct fastrpc_apps *me,
 	int err = 0;
 	struct fastrpc_mmap *map = 0, *mapfree = 0;
 	struct hlist_node *pos, *n;
+        mutex_lock(&fdata->map_mutex);
 	VERIFY(err, 0 == (err = fastrpc_munmap_on_dsp(me, munmap)));
 	if (err)
 		goto bail;
@@ -1156,6 +1158,7 @@ static int fastrpc_internal_munmap(struct fastrpc_apps *me,
 		free_map(mapfree);
 		kfree(mapfree);
 	}
+	mutex_unlock(&fdata->map_mutex);
 	return err;
 }
 
@@ -1172,6 +1175,7 @@ static int fastrpc_internal_mmap(struct fastrpc_apps *me,
 	int num;
 	int err = 0;
 
+	mutex_lock(&fdata->map_mutex);
 	VERIFY(err, 0 != (map = kzalloc(sizeof(*map), GFP_KERNEL)));
 	if (err)
 		goto bail;
@@ -1222,6 +1226,7 @@ static int fastrpc_internal_mmap(struct fastrpc_apps *me,
 		kfree(map);
 	}
 	kfree(pages);
+	mutex_unlock(&fdata->map_mutex);
 	return err;
 }
 
@@ -1279,6 +1284,7 @@ static int fastrpc_device_release(struct inode *inode, struct file *file)
 			free_map(map);
 			kfree(map);
 		}
+		mutex_destroy(&fdata->map_mutex);
 		kfree(fdata);
 		kref_put_mutex(&me->kref, fastrpc_channel_close,
 				&me->smd_mutex);
@@ -1324,6 +1330,7 @@ static int fastrpc_device_open(struct inode *inode, struct file *filp)
 		VERIFY(err, 0 == fastrpc_create_current_dsp_process());
 		if (err)
 			goto bail;
+		mutex_init(&fdata->map_mutex);
 		filp->private_data = fdata;
 bail:
 		if (err) {
