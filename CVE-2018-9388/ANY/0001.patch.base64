diff --git a/drivers/input/touchscreen/stm/ftm4_pdc.c b/drivers/input/touchscreen/stm/ftm4_pdc.c
index a11bdd8..66a1d91 100644
--- a/drivers/input/touchscreen/stm/ftm4_pdc.c
+++ b/drivers/input/touchscreen/stm/ftm4_pdc.c
@@ -181,8 +181,8 @@
 static DEVICE_ATTR(cmd_status, S_IRUGO, show_cmd_status, NULL);
 static DEVICE_ATTR(cmd_result, S_IRUGO, show_cmd_result, NULL);
 static DEVICE_ATTR(cmd_list, S_IRUGO, cmd_list_show, NULL);
-static DEVICE_ATTR(fw_upgrade, S_IWUSR | S_IWGRP, NULL, store_upgrade);
-static DEVICE_ATTR(check_fw, S_IWUSR | S_IWGRP, NULL, store_check_fw);
+static DEVICE_ATTR(fw_upgrade, S_IWUSR, NULL, store_upgrade);
+static DEVICE_ATTR(check_fw, S_IWUSR, NULL, store_check_fw);
 static DEVICE_ATTR(version, S_IRUGO, show_version_info, NULL);
 static DEVICE_ATTR(vrmode, S_IRUSR | S_IRGRP | S_IWUSR | S_IWGRP,
 		   show_vrmode, store_vrmode);
@@ -238,7 +238,7 @@
 	struct fts_ts_info *info = dev_get_drvdata(dev);
 	int ret = 0;
 
-	if (strlcpy(&info->test_fwpath[0], buf, count) <= 0) {
+	if (strlcpy(info->test_fwpath, buf, sizeof(info->test_fwpath)) <= 0) {
 		tsp_debug_err(&info->client->dev, "%s: invalid firmware name\n", __func__);
 		return -EINVAL;
 	}
@@ -422,6 +422,12 @@
 		return -EINVAL;
 	}
 
+	if (count == 0) {
+		tsp_debug_err(&info->client->dev,
+				"%s: no argument provided\n", __func__);
+		return -EINVAL;
+	}
+
 	if (count > CMD_STR_LEN) {
 		tsp_debug_err(&info->client->dev,
 				"%s: overflow command length\n", __func__);
