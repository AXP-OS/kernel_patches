From 54f6d0bf3270e8dd322705b0c00d2508f8af786f Mon Sep 17 00:00:00 2001
From: Paul Zhang <paulz@codeaurora.org>
Date: Thu, 1 Nov 2018 14:16:35 +0800
Subject: qcacld-2.0: Add data validation for avoid frequency command

propagation from qcacld-3.0 to qcacld-2.0

Currently in avoid frequency vendor command, data validation
is not being done, since this data comes from userspace driver
should not be using this data pointer without validation.

To address this issue add validation for data pointer and data
length received in driver.

Change-Id: I7b56e2ddcbcb5e98dd93d152033db48063e772d3
CRs-Fixed: 2335431
---
 CORE/HDD/src/wlan_hdd_cfg80211.c | 22 ++++++++++++++++++++--
 1 file changed, 20 insertions(+), 2 deletions(-)

diff --git a/CORE/HDD/src/wlan_hdd_cfg80211.c b/CORE/HDD/src/wlan_hdd_cfg80211.c
index 4546948..b489760 100644
--- a/CORE/HDD/src/wlan_hdd_cfg80211.c
+++ b/CORE/HDD/src/wlan_hdd_cfg80211.c
@@ -13896,6 +13896,7 @@ __wlan_hdd_cfg80211_avoid_freq(struct wiphy *wiphy,
 	int unsafe_channel_index;
 	tHddAvoidFreqList *channel_list;
 	tVOS_CON_MODE curr_mode;
+	uint8_t num_args = 0;
 
 	ENTER();
         curr_mode = hdd_get_conparam();
@@ -13909,11 +13910,28 @@ __wlan_hdd_cfg80211_avoid_freq(struct wiphy *wiphy,
 	if (0 != ret)
 		return -EINVAL;
 
-	channel_list = (tHddAvoidFreqList *)data;
-	if (!channel_list) {
+	if (!data || data_len < (sizeof(channel_list->avoidFreqRangeCount) +
+				 sizeof(tHddAvoidFreqRange))) {
 		hddLog(LOGE, FL("Avoid frequency channel list empty"));
 		return -EINVAL;
 	}
+	num_args = (data_len - sizeof(channel_list->avoidFreqRangeCount)) /
+		   sizeof(channel_list->avoidFreqRange[0].startFreq);
+
+	if (num_args < 2 || num_args > HDD_MAX_AVOID_FREQ_RANGES * 2 ||
+	    num_args % 2 != 0) {
+		hddLog(LOGE,FL("Invalid avoid frequency channel list"));
+		return -EINVAL;
+	}
+
+	channel_list = (tHddAvoidFreqList *)data;
+	if (channel_list->avoidFreqRangeCount == 0 ||
+	    channel_list->avoidFreqRangeCount > HDD_MAX_AVOID_FREQ_RANGES ||
+	    2 * channel_list->avoidFreqRangeCount != num_args) {
+		hddLog(VOS_TRACE_LEVEL_ERROR, "Invalid freq range count %d",
+		       channel_list->avoidFreqRangeCount);
+		return -EINVAL;
+	}
 
 	vos_get_wlan_unsafe_channel(hdd_ctx->unsafe_channel_list,
 			&(hdd_ctx->unsafe_channel_count),
-- 
cgit v1.1

