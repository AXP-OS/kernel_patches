From 770620ffcc7ce7e23848952acb2062014cb4ef5f Mon Sep 17 00:00:00 2001
From: Vikash Garodia <vgarodia@codeaurora.org>
Date: Tue, 21 Apr 2020 13:10:42 +0530
Subject: msm: vidc: change cvp buffer add sequence

[1] Due to race between cvp_register & cvp_unregister
on same cvp buffer lead to Use-After-Free issue.
[2] To address this issue, add cvp buffer into a list
inst->cvpbufs.list only after completing all required
steps on registration sequence.

CRs-Fixed: 2631383
Change-Id: If9f22d17e64f003528d5653f81404f3fcc6e88f5
Signed-off-by: Vikash Garodia <vgarodia@codeaurora.org>
---
 drivers/media/platform/msm/vidc/msm_cvp.c | 11 ++++-------
 1 file changed, 4 insertions(+), 7 deletions(-)

diff --git a/drivers/media/platform/msm/vidc/msm_cvp.c b/drivers/media/platform/msm/vidc/msm_cvp.c
index 768efeb..f63c55c 100644
--- a/drivers/media/platform/msm/vidc/msm_cvp.c
+++ b/drivers/media/platform/msm/vidc/msm_cvp.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2018, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2018, 2020, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -375,9 +375,6 @@ static int msm_cvp_register_buffer(struct msm_vidc_inst *inst,
 		dprintk(VIDC_ERR, "%s: cbuf alloc failed\n", __func__);
 		return -ENOMEM;
 	}
-	mutex_lock(&inst->cvpbufs.lock);
-	list_add_tail(&cbuf->list, &inst->cvpbufs.list);
-	mutex_unlock(&inst->cvpbufs.lock);
 
 	memcpy(&cbuf->buf, buf, sizeof(struct msm_cvp_buffer));
 	cbuf->smem.buffer_type = get_hal_buftype(__func__, buf->type);
@@ -403,14 +400,14 @@ static int msm_cvp_register_buffer(struct msm_vidc_inst *inst,
 		print_cvp_buffer(VIDC_ERR, "register failed", inst, cbuf);
 		goto exit;
 	}
+	mutex_lock(&inst->cvpbufs.lock);
+	list_add_tail(&cbuf->list, &inst->cvpbufs.list);
+	mutex_unlock(&inst->cvpbufs.lock);
 	return rc;
 
 exit:
 	if (cbuf->smem.device_addr)
 		msm_smem_unmap_dma_buf(inst, &cbuf->smem);
-	mutex_lock(&inst->cvpbufs.lock);
-	list_del(&cbuf->list);
-	mutex_unlock(&inst->cvpbufs.lock);
 	kfree(cbuf);
 	cbuf = NULL;
 
-- 
cgit v1.1

