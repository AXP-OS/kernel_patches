From e543a787241afd850a6509e814a936d84ccd4b74 Mon Sep 17 00:00:00 2001
From: Govindaraj Rajagopal <grajagop@codeaurora.org>
Date: Mon, 23 Mar 2020 12:59:09 +0530
Subject: msm: vidc: change cvp buffer add sequence

[1] Due to race between cvp_register & cvp_unregister
on same cvp buffer lead to Use-After-Free issue.
[2] To address this issue, add cvp buffer into a list
inst->cvpbufs.list only after completing all required
steps on registration sequence.

Change-Id: If9f22d17e64f003528d5653f81404f3fcc6e88f5
Signed-off-by: Govindaraj Rajagopal <grajagop@codeaurora.org>
---
 msm/vidc/msm_cvp_internal.c | 11 ++++-------
 1 file changed, 4 insertions(+), 7 deletions(-)

diff --git a/msm/vidc/msm_cvp_internal.c b/msm/vidc/msm_cvp_internal.c
index 36a74de..48efca5 100644
--- a/msm/vidc/msm_cvp_internal.c
+++ b/msm/vidc/msm_cvp_internal.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0-only
 /*
- * Copyright (c) 2018-2019, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.
  */
 
 #include "msm_cvp_internal.h"
@@ -364,9 +364,6 @@ static int msm_cvp_register_buffer(struct msm_vidc_inst *inst,
 		s_vpr_e(inst->sid, "%s: cbuf alloc failed\n", __func__);
 		return -ENOMEM;
 	}
-	mutex_lock(&inst->cvpbufs.lock);
-	list_add_tail(&cbuf->list, &inst->cvpbufs.list);
-	mutex_unlock(&inst->cvpbufs.lock);
 
 	memcpy(&cbuf->buf, buf, sizeof(struct msm_cvp_buffer));
 	cbuf->smem.buffer_type = get_hal_buftype(__func__, buf->type,
@@ -393,14 +390,14 @@ static int msm_cvp_register_buffer(struct msm_vidc_inst *inst,
 		print_cvp_buffer(VIDC_ERR, "register failed", inst, cbuf);
 		goto exit;
 	}
+	mutex_lock(&inst->cvpbufs.lock);
+	list_add_tail(&cbuf->list, &inst->cvpbufs.list);
+	mutex_unlock(&inst->cvpbufs.lock);
 	return rc;
 
 exit:
 	if (cbuf->smem.device_addr)
 		inst->smem_ops->smem_unmap_dma_buf(inst, &cbuf->smem);
-	mutex_lock(&inst->cvpbufs.lock);
-	list_del(&cbuf->list);
-	mutex_unlock(&inst->cvpbufs.lock);
 	kfree(cbuf);
 	cbuf = NULL;
 
-- 
cgit v1.1

