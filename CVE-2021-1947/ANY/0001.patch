From cb82ed90520b6801e6b0ec6bac6821cd347e3de7 Mon Sep 17 00:00:00 2001
From: Vinayak Menon <vinmenon@codeaurora.org>
Date: Wed, 23 Dec 2020 16:02:15 +0530
Subject: mm: process_reclaim: skip target_vma

Skip using target_vma for address space reclaim. Shared pages
are not reclaimed by this interface and thus there isn't a need
to perform targeted reclaim.

Change-Id: I17cc0452c1179786ac64f0dd1ee81b2b71bb7caa
Signed-off-by: Vinayak Menon <vinmenon@codeaurora.org>
---
 drivers/gpu/msm/kgsl_reclaim.c | 5 ++---
 fs/proc/task_mmu.c             | 4 ++--
 include/linux/mm.h             | 2 +-
 3 files changed, 5 insertions(+), 6 deletions(-)

diff --git a/drivers/gpu/msm/kgsl_reclaim.c b/drivers/gpu/msm/kgsl_reclaim.c
index 84ca92d..443525d 100644
--- a/drivers/gpu/msm/kgsl_reclaim.c
+++ b/drivers/gpu/msm/kgsl_reclaim.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0-only
 /*
- * Copyright (c) 2020, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2020-2021, The Linux Foundation. All rights reserved.
  */
 
 #include <linux/kthread.h>
@@ -269,8 +269,7 @@ static int kgsl_reclaim_callback(struct notifier_block *nb,
 			memdesc->priv |= KGSL_MEMDESC_RECLAIMED;
 
 			ret = reclaim_address_space
-				(memdesc->shmem_filp->f_mapping,
-				data, memdesc->vma);
+				(memdesc->shmem_filp->f_mapping, data);
 
 			memdesc->reclaimed_page_count += memdesc->page_count;
 			atomic_add(memdesc->page_count,
diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c
index 2e8ba4c..6e3057e 100644
--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@ -1686,7 +1686,7 @@ static void proc_reclaim_notify(unsigned long pid, void *rp)
 }
 
 int reclaim_address_space(struct address_space *mapping,
-			struct reclaim_param *rp, struct vm_area_struct *vma)
+			struct reclaim_param *rp)
 {
 	struct radix_tree_iter iter;
 	void __rcu **slot;
@@ -1727,7 +1727,7 @@ int reclaim_address_space(struct address_space *mapping,
 		}
 	}
 	rcu_read_unlock();
-	reclaimed = reclaim_pages_from_list(&page_list, vma);
+	reclaimed = reclaim_pages_from_list(&page_list, NULL);
 	rp->nr_reclaimed += reclaimed;
 
 	if (rp->nr_scanned >= rp->nr_to_reclaim)
diff --git a/include/linux/mm.h b/include/linux/mm.h
index ac4819f..d7cca73 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -3058,7 +3058,7 @@ extern struct reclaim_param reclaim_task_anon(struct task_struct *task,
 extern struct reclaim_param reclaim_task_nomap(struct task_struct *task,
 		int nr_to_reclaim);
 extern int reclaim_address_space(struct address_space *mapping,
-		struct reclaim_param *rp, struct vm_area_struct *vma);
+		struct reclaim_param *rp);
 extern int proc_reclaim_notifier_register(struct notifier_block *nb);
 extern int proc_reclaim_notifier_unregister(struct notifier_block *nb);
 #endif
-- 
cgit v1.1

