From e3731bc5080eb91349d3adc6aaf6b9f43481d2df Mon Sep 17 00:00:00 2001
From: Yizhou Jiang <yizhjian@codeaurora.org>
Date: Tue, 5 Jan 2021 13:14:47 +0530
Subject: Revert "qcacld-3.0: Send assoc reject upon failing to post ASSOC_IND"

This reverts commit b941a9aa20f6fa028b7a7cc81c4c43e1a4d82377.

Change-Id: I3e2ad4ba5acec8bbbf17ce20214c94319f5664af
---
 core/mac/src/pe/lim/lim_process_assoc_req_frame.c  | 204 +--------------------
 core/mac/src/pe/lim/lim_process_mlm_rsp_messages.c |  11 +-
 core/mac/src/pe/lim/lim_types.h                    |   5 +-
 3 files changed, 13 insertions(+), 207 deletions(-)

diff --git a/core/mac/src/pe/lim/lim_process_assoc_req_frame.c b/core/mac/src/pe/lim/lim_process_assoc_req_frame.c
index 6427779..eb513f8 100644
--- a/core/mac/src/pe/lim/lim_process_assoc_req_frame.c
+++ b/core/mac/src/pe/lim/lim_process_assoc_req_frame.c
@@ -2965,7 +2965,7 @@ bool lim_fill_lim_assoc_ind_params(
  *
  * Return: None
  */
-QDF_STATUS lim_send_mlm_assoc_ind(struct mac_context *mac_ctx,
+void lim_send_mlm_assoc_ind(struct mac_context *mac_ctx,
 	tpDphHashNode sta_ds, struct pe_session *session_entry)
 {
 	tpLimMlmAssocInd assoc_ind;
@@ -2976,7 +2976,7 @@ QDF_STATUS lim_send_mlm_assoc_ind(struct mac_context *mac_ctx,
 
 	if (!session_entry->parsedAssocReq) {
 		pe_err(" Parsed Assoc req is NULL");
-		return QDF_STATUS_E_INVAL;
+		return;
 	}
 
 	/* Get a copy of the already parsed Assoc Request */
@@ -2985,7 +2985,7 @@ QDF_STATUS lim_send_mlm_assoc_ind(struct mac_context *mac_ctx,
 
 	if (!assoc_req) {
 		pe_err("assoc req for assoc_id:%d is NULL", sta_ds->assocId);
-		return QDF_STATUS_E_INVAL;
+		return;
 	}
 
 	/* Get the phy_mode */
@@ -3008,202 +3008,18 @@ QDF_STATUS lim_send_mlm_assoc_ind(struct mac_context *mac_ctx,
 		assoc_ind = qdf_mem_malloc(temp);
 		if (!assoc_ind) {
 			lim_release_peer_idx(mac_ctx, sta_ds->assocId,
-				session_entry);
-			pe_err("AllocateMemory failed for assoc_ind");
-			return QDF_STATUS_E_NOMEM;
-		}
-		qdf_mem_copy((uint8_t *) assoc_ind->peerMacAddr,
-			(uint8_t *) sta_ds->staAddr, sizeof(tSirMacAddr));
-		assoc_ind->aid = sta_ds->assocId;
-		qdf_mem_copy((uint8_t *) &assoc_ind->ssId,
-			(uint8_t *) &(assoc_req->ssId),
-			assoc_req->ssId.length + 1);
-		assoc_ind->sessionId = session_entry->peSessionId;
-		assoc_ind->authType = sta_ds->mlmStaContext.authType;
-		assoc_ind->akm_type = sta_ds->mlmStaContext.akm_type;
-		assoc_ind->capabilityInfo = assoc_req->capabilityInfo;
-
-		/* Fill in RSN IE information */
-		assoc_ind->rsnIE.length = 0;
-		/* if WPS IE is present, ignore RSN IE */
-		if (assoc_req->addIEPresent && assoc_req->addIE.length) {
-			wpsie = limGetWscIEPtr(mac_ctx,
-				assoc_req->addIE.addIEdata,
-				assoc_req->addIE.length);
-		}
-		if (assoc_req->rsnPresent && (NULL == wpsie)) {
-			pe_debug("Assoc Req RSN IE len: %d",
-				assoc_req->rsn.length);
-			assoc_ind->rsnIE.length = 2 + assoc_req->rsn.length;
-			assoc_ind->rsnIE.rsnIEdata[0] = SIR_MAC_RSN_EID;
-			assoc_ind->rsnIE.rsnIEdata[1] =
-				assoc_req->rsn.length;
-			qdf_mem_copy(&assoc_ind->rsnIE.rsnIEdata[2],
-				assoc_req->rsn.info,
-				assoc_req->rsn.length);
-		}
-		/* Fill in 802.11h related info */
-		if (assoc_req->powerCapabilityPresent
-			&& assoc_req->supportedChannelsPresent) {
-			assoc_ind->spectrumMgtIndicator = true;
-			assoc_ind->powerCap.minTxPower =
-				assoc_req->powerCapability.minTxPower;
-			assoc_ind->powerCap.maxTxPower =
-				assoc_req->powerCapability.maxTxPower;
-			lim_convert_supported_channels(mac_ctx, assoc_ind,
-				 assoc_req);
-		} else {
-			assoc_ind->spectrumMgtIndicator = false;
-		}
-
-		/* This check is to avoid extra Sec IEs present incase of WPS */
-		if (assoc_req->wpaPresent && (NULL == wpsie)) {
-			rsn_len = assoc_ind->rsnIE.length;
-			if ((rsn_len + assoc_req->wpa.length)
-				>= SIR_MAC_MAX_IE_LENGTH) {
-				pe_err("rsnIEdata index out of bounds: %d",
-					rsn_len);
-				qdf_mem_free(assoc_ind);
-				return QDF_STATUS_E_INVAL;
-			}
-			assoc_ind->rsnIE.rsnIEdata[rsn_len] =
-				SIR_MAC_WPA_EID;
-			assoc_ind->rsnIE.rsnIEdata[rsn_len + 1]
-				= assoc_req->wpa.length;
-			qdf_mem_copy(
-				&assoc_ind->rsnIE.rsnIEdata[rsn_len + 2],
-				assoc_req->wpa.info, assoc_req->wpa.length);
-			assoc_ind->rsnIE.length += 2 + assoc_req->wpa.length;
-		}
-#ifdef FEATURE_WLAN_WAPI
-		lim_fill_assoc_ind_wapi_info(mac_ctx, assoc_req, assoc_ind,
-			wpsie);
-#endif
-
-		assoc_ind->addIE.length = 0;
-		if (assoc_req->addIEPresent) {
-			qdf_mem_copy(&assoc_ind->addIE.addIEdata,
-				assoc_req->addIE.addIEdata,
-				assoc_req->addIE.length);
-			assoc_ind->addIE.length = assoc_req->addIE.length;
-		}
-		/*
-		 * Add HT Capabilities into addIE for OBSS
-		 * processing in hostapd
-		 */
-		if (assoc_req->HTCaps.present) {
-			qdf_mem_copy(&assoc_ind->ht_caps, &assoc_req->HTCaps,
-				     sizeof(tDot11fIEHTCaps));
-
-			rsn_len = assoc_ind->addIE.length;
-			if (assoc_ind->addIE.length + DOT11F_IE_HTCAPS_MIN_LEN
-				+ 2 < SIR_MAC_MAX_IE_LENGTH) {
-				assoc_ind->addIE.addIEdata[rsn_len] =
-					SIR_MAC_HT_CAPABILITIES_EID;
-				assoc_ind->addIE.addIEdata[rsn_len + 1] =
-					DOT11F_IE_HTCAPS_MIN_LEN;
-				qdf_mem_copy(
-					&assoc_ind->addIE.addIEdata[rsn_len+2],
-					((uint8_t *)&assoc_req->HTCaps) + 1,
-					DOT11F_IE_HTCAPS_MIN_LEN);
-				assoc_ind->addIE.length +=
-					2 + DOT11F_IE_HTCAPS_MIN_LEN;
-			} else {
-				pe_err("Fail:HT capabilities IE to addIE");
-			}
-		}
-
-		if (assoc_req->wmeInfoPresent) {
-			if (wlan_cfg_get_int (mac_ctx,
-				(uint16_t) WNI_CFG_WME_ENABLED, &tmp)
-				!= QDF_STATUS_SUCCESS)
-				pe_err("wlan_cfg_get_int failed for id: %d",
-					WNI_CFG_WME_ENABLED);
-
-			/* check whether AP is enabled with WMM */
-			if (tmp)
-				assoc_ind->WmmStaInfoPresent = 1;
-			else
-				assoc_ind->WmmStaInfoPresent = 0;
-			/*
-			 * Note: we are not rejecting association here
-			 * because IOT will fail
-			 */
+					     session_entry);
+			return;
 		}
-		/* Required for indicating the frames to upper layer */
-		assoc_ind->assocReqLength = assoc_req->assocReqFrameLength;
-		assoc_ind->assocReqPtr = assoc_req->assocReqFrame;
-
-		assoc_ind->beaconPtr = session_entry->beacon;
-		assoc_ind->beaconLength = session_entry->bcnLen;
-
-		assoc_ind->chan_info.chan_id =
-			session_entry->currentOperChannel;
-		assoc_ind->chan_info.mhz =
-			cds_chan_to_freq(session_entry->currentOperChannel);
-		assoc_ind->chan_info.band_center_freq1 =
-			cds_chan_to_freq(session_entry->currentOperChannel);
-		assoc_ind->chan_info.band_center_freq2 = 0;
-		assoc_ind->chan_info.reg_info_1 =
-			(session_entry->maxTxPower << 16);
-		assoc_ind->chan_info.reg_info_2 =
-			(session_entry->maxTxPower << 8);
-		assoc_ind->chan_info.nss = sta_ds->nss;
-		assoc_ind->chan_info.rate_flags =
-			lim_get_max_rate_flags(mac_ctx, sta_ds);
-		assoc_ind->ampdu = false;
-		assoc_ind->sgi_enable = false;
-		assoc_ind->tx_stbc = false;
-		assoc_ind->rx_stbc = false;
-		assoc_ind->ch_width = eHT_CHANNEL_WIDTH_20MHZ;
-		assoc_ind->mode = SIR_SME_PHY_MODE_LEGACY;
-		assoc_ind->max_supp_idx = 0xff;
-		assoc_ind->max_ext_idx = 0xff;
-		assoc_ind->max_mcs_idx = 0xff;
-		assoc_ind->rx_mcs_map = 0xff;
-		assoc_ind->tx_mcs_map = 0xff;
-
-		if (assoc_req->supportedRates.numRates)
-			assoc_ind->max_supp_idx =
-				lim_get_max_rate_idx(
-					&assoc_req->supportedRates);
-		if (assoc_req->extendedRates.numRates)
-			assoc_ind->max_ext_idx =
-				lim_get_max_rate_idx(
-					&assoc_req->extendedRates);
-
-		if (sta_ds->mlmStaContext.htCapability) {
-			/* ampdu */
-			assoc_ind->ampdu = true;
-
-			/* sgi */
-			if (sta_ds->htShortGI20Mhz || sta_ds->htShortGI40Mhz)
-				assoc_ind->sgi_enable = true;
-
-			/* stbc */
-			assoc_ind->tx_stbc = assoc_req->HTCaps.txSTBC;
-			assoc_ind->rx_stbc = assoc_req->HTCaps.rxSTBC;
-
-			/* ch width */
-			assoc_ind->ch_width =
-				sta_ds->htSupportedChannelWidthSet ?
-				eHT_CHANNEL_WIDTH_40MHZ :
-				eHT_CHANNEL_WIDTH_20MHZ;
-
-			/* mode */
-			assoc_ind->mode = SIR_SME_PHY_MODE_HT;
-			maxidx = 0;
-			for (i = 0; i < 8; i++) {
-				if (assoc_req->HTCaps.supportedMCSSet[0] &
-					(1 << i))
-					maxidx = i;
-			}
-			assoc_ind->max_mcs_idx = maxidx;
+		if (!lim_fill_lim_assoc_ind_params(assoc_ind, mac_ctx,
+						   sta_ds, session_entry)) {
+			qdf_mem_free(assoc_ind);
+			return;
 		}
 		lim_post_sme_message(mac_ctx, LIM_MLM_ASSOC_IND,
 				     (uint32_t *)assoc_ind);
 		qdf_mem_free(assoc_ind);
 	}
 
-	return QDF_STATUS_SUCCESS;
+	return;
 }
diff --git a/core/mac/src/pe/lim/lim_process_mlm_rsp_messages.c b/core/mac/src/pe/lim/lim_process_mlm_rsp_messages.c
index 6f6bdbd..401b015 100644
--- a/core/mac/src/pe/lim/lim_process_mlm_rsp_messages.c
+++ b/core/mac/src/pe/lim/lim_process_mlm_rsp_messages.c
@@ -1977,16 +1977,7 @@ void lim_process_ap_mlm_add_sta_rsp(struct mac_context *mac,
 	 * 2) PE receives eWNI_SME_ASSOC_CNF from SME
 	 * 3) BTAMP-AP sends Re/Association Response to BTAMP-STA
 	 */
-
-	if (lim_send_mlm_assoc_ind(mac, sta, pe_session) !=
-							QDF_STATUS_SUCCESS) {
-		lim_reject_association(mac, sta->staAddr,
-				       sta->mlmStaContext.subType,
-				       true, sta->mlmStaContext.authType,
-				       sta->assocId, true,
-				       eSIR_MAC_UNSPEC_FAILURE_STATUS,
-				       pe_session);
-	}
+	lim_send_mlm_assoc_ind(mac, sta, pe_session);
 	/* fall though to reclaim the original Add STA Response message */
 end:
 	if (0 != limMsgQ->bodyptr) {
diff --git a/core/mac/src/pe/lim/lim_types.h b/core/mac/src/pe/lim/lim_types.h
index 144221b..fed50a9 100644
--- a/core/mac/src/pe/lim/lim_types.h
+++ b/core/mac/src/pe/lim/lim_types.h
@@ -451,9 +451,8 @@ lim_fill_sme_assoc_ind_params(
 	struct mac_context *mac_ctx,
 	tpLimMlmAssocInd assoc_ind, struct assoc_ind *sme_assoc_ind,
 	struct pe_session *session_entry, bool assoc_req_alloc);
-QDF_STATUS lim_send_mlm_assoc_ind(struct mac_context *mac_ctx,
-				  tpDphHashNode sta_ds,
-			          struct pe_session *session_entry);
+void lim_send_mlm_assoc_ind(struct mac_context *mac, tpDphHashNode sta,
+			    struct pe_session *pe_session);
 
 #define ASSOC_FRAME_LEN 0
 /**
-- 
cgit v1.1

