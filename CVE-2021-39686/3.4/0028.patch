From 492c30c644d394c3d4243f138dc3060fbaf60503 Mon Sep 17 00:00:00 2001
From: Todd Kjos <tkjos@google.com>
Date: Tue, 12 Oct 2021 09:56:13 -0700
Subject: [PATCH] BACKPORT: binder: use cred instead of task for selinux checks

Since binder was integrated with selinux, it has passed
'struct task_struct' associated with the binder_proc
to represent the source and target of transactions.
The conversion of task to SID was then done in the hook
implementations. It turns out that there are race conditions
which can result in an incorrect security context being used.

Fix by using the 'struct cred' saved during binder_open and pass
it to the selinux subsystem.

Cc: stable@vger.kernel.org # 5.14 (need backport for earlier stables)
Fixes: 79af73079d75 ("Add security hooks to binder and implement the hooks for SELinux.")
Suggested-by: Jann Horn <jannh@google.com>
Signed-off-by: Todd Kjos <tkjos@google.com>
Acked-by: Casey Schaufler <casey@schaufler-ca.com>
Signed-off-by: Paul Moore <paul@paul-moore.com>
Bug: 200688826
(cherry picked from commit 52f88693378a58094c538662ba652aff0253c4fe)
[ refactored to avoid changing KMI: struct binder_proc ]
Change-Id: I1664c1f0c2142c17e9ca0d6790bb94de79f531e3
CVE-2021-39686
Signed-off-by: Kevin F. Haggerty <haggertk@lineageos.org>
---
 drivers/staging/android/binder.c | 14 +++++++++-----
 include/linux/security.h         | 27 +++++++++++++++------------
 security/capability.c            |  8 ++++----
 security/security.c              |  8 ++++----
 security/selinux/hooks.c         | 23 +++++++++--------------
 5 files changed, 41 insertions(+), 39 deletions(-)

diff --git a/drivers/staging/android/binder.c b/drivers/staging/android/binder.c
index 7841e08eacb6..ae19d3ff6b94 100644
--- a/drivers/staging/android/binder.c
+++ b/drivers/staging/android/binder.c
@@ -1750,7 +1750,8 @@ static int binder_translate_binder(struct flat_binder_object *fp,
 				  (u64)node->cookie);
 		return -EINVAL;
 	}
-	if (security_binder_transfer_binder(proc->tsk, target_proc->tsk))
+	if (security_binder_transfer_binder(binder_get_cred(proc),
+					    binder_get_cred(target_proc)))
 		return -EPERM;
 
 	ref = binder_get_ref_for_node(target_proc, node);
@@ -1790,7 +1791,8 @@ static int binder_translate_handle(struct flat_binder_object *fp,
 				  proc->pid, thread->pid, fp->handle);
 		return -EINVAL;
 	}
-	if (security_binder_transfer_binder(proc->tsk, target_proc->tsk))
+	if (security_binder_transfer_binder(binder_get_cred(proc),
+					    binder_get_cred(target_proc)))
 		return -EPERM;
 
 	if (ref->node->proc == target_proc) {
@@ -1860,7 +1862,8 @@ static int binder_translate_fd(int fd,
 		ret = -EBADF;
 		goto err_fget;
 	}
-	ret = security_binder_transfer_file(proc->tsk, target_proc->tsk, file);
+	ret = security_binder_transfer_file(binder_get_cred(proc),
+					    binder_get_cred(target_proc), file);
 	if (ret < 0) {
 		ret = -EPERM;
 		goto err_security;
@@ -2087,7 +2090,8 @@ static void binder_transaction(struct binder_proc *proc,
 			return_error = BR_DEAD_REPLY;
 			goto err_dead_binder;
 		}
-		if (security_binder_transaction(proc->tsk, target_proc->tsk) < 0) {
+		if (security_binder_transaction(binder_get_cred(proc),
+					binder_get_cred(target_proc)) < 0) {
 			return_error = BR_FAILED_REPLY;
 			goto err_invalid_target_handle;
 		}
@@ -3353,7 +3357,7 @@ static int binder_ioctl_set_ctx_mgr(struct file *filp,
 		ret = -EBUSY;
 		goto out;
 	}
-	ret = security_binder_set_context_mgr(proc->tsk);
+	ret = security_binder_set_context_mgr(binder_get_cred(proc));
 	if (ret < 0)
 		goto out;
 	if (context->binder_context_mgr_uid != -1) {
diff --git a/include/linux/security.h b/include/linux/security.h
index 00b776196d67..dc0df65a1be8 100644
--- a/include/linux/security.h
+++ b/include/linux/security.h
@@ -1383,10 +1383,10 @@ static inline void security_free_mnt_opts(struct security_mnt_opts *opts)
 struct security_operations {
 	char name[SECURITY_NAME_MAX + 1];
 
-	int (*binder_set_context_mgr) (struct task_struct *mgr);
-	int (*binder_transaction) (struct task_struct *from, struct task_struct *to);
-	int (*binder_transfer_binder) (struct task_struct *from, struct task_struct *to);
-	int (*binder_transfer_file) (struct task_struct *from, struct task_struct *to, struct file *file);
+	int (*binder_set_context_mgr) (const struct cred *mgr);
+	int (*binder_transaction) (const struct cred *from, const struct cred *to);
+	int (*binder_transfer_binder) (const struct cred *from, const struct cred *to);
+	int (*binder_transfer_file) (const struct cred *from, const struct cred *to, struct file *file);
 
 	int (*ptrace_access_check) (struct task_struct *child, unsigned int mode);
 	int (*ptrace_traceme) (struct task_struct *parent);
@@ -1675,10 +1675,13 @@ extern void __init security_fixup_ops(struct security_operations *ops);
 
 
 /* Security operations */
-int security_binder_set_context_mgr(struct task_struct *mgr);
-int security_binder_transaction(struct task_struct *from, struct task_struct *to);
-int security_binder_transfer_binder(struct task_struct *from, struct task_struct *to);
-int security_binder_transfer_file(struct task_struct *from, struct task_struct *to, struct file *file);
+int security_binder_set_context_mgr(const struct cred *mgr);
+int security_binder_transaction(const struct cred *from,
+				const struct cred *to);
+int security_binder_transfer_binder(const struct cred *from,
+				    const struct cred *to);
+int security_binder_transfer_file(const struct cred *from,
+				  const struct cred *to, struct file *file);
 int security_ptrace_access_check(struct task_struct *child, unsigned int mode);
 int security_ptrace_traceme(struct task_struct *parent);
 int security_capget(struct task_struct *target,
@@ -1863,22 +1866,22 @@ static inline int security_init(void)
 	return 0;
 }
 
-static inline int security_binder_set_context_mgr(struct task_struct *mgr)
+static inline int security_binder_set_context_mgr(const struct cred *mgr)
 {
 	return 0;
 }
 
-static inline int security_binder_transaction(struct task_struct *from, struct task_struct *to)
+static inline int security_binder_transaction(const struct cred *from, const struct cred *to)
 {
 	return 0;
 }
 
-static inline int security_binder_transfer_binder(struct task_struct *from, struct task_struct *to)
+static inline int security_binder_transfer_binder(const struct cred *from, const struct cred *to)
 {
 	return 0;
 }
 
-static inline int security_binder_transfer_file(struct task_struct *from, struct task_struct *to, struct file *file)
+static inline int security_binder_transfer_file(const struct cred *from, const struct cred *to, struct file *file)
 {
 	return 0;
 }
diff --git a/security/capability.c b/security/capability.c
index d0a49eeca59e..b2ee5ae5752b 100644
--- a/security/capability.c
+++ b/security/capability.c
@@ -12,22 +12,22 @@
 
 #include <linux/security.h>
 
-static int cap_binder_set_context_mgr(struct task_struct *mgr)
+static int cap_binder_set_context_mgr(const struct cred *mgr)
 {
 	return 0;
 }
 
-static int cap_binder_transaction(struct task_struct *from, struct task_struct *to)
+static int cap_binder_transaction(const struct cred *from, const struct cred *to)
 {
 	return 0;
 }
 
-static int cap_binder_transfer_binder(struct task_struct *from, struct task_struct *to)
+static int cap_binder_transfer_binder(const struct cred *from, const struct cred *to)
 {
 	return 0;
 }
 
-static int cap_binder_transfer_file(struct task_struct *from, struct task_struct *to, struct file *file)
+static int cap_binder_transfer_file(const struct cred *from, const struct cred *to, struct file *file)
 {
 	return 0;
 }
diff --git a/security/security.c b/security/security.c
index 8b18f4147fe3..dc168a3df17f 100644
--- a/security/security.c
+++ b/security/security.c
@@ -130,22 +130,22 @@ int __init register_security(struct security_operations *ops)
 
 /* Security operations */
 
-int security_binder_set_context_mgr(struct task_struct *mgr)
+int security_binder_set_context_mgr(const struct cred *mgr)
 {
 	return security_ops->binder_set_context_mgr(mgr);
 }
 
-int security_binder_transaction(struct task_struct *from, struct task_struct *to)
+int security_binder_transaction(const struct cred *from, const struct cred *to)
 {
 	return security_ops->binder_transaction(from, to);
 }
 
-int security_binder_transfer_binder(struct task_struct *from, struct task_struct *to)
+int security_binder_transfer_binder(const struct cred *from, const struct cred *to)
 {
 	return security_ops->binder_transfer_binder(from, to);
 }
 
-int security_binder_transfer_file(struct task_struct *from, struct task_struct *to, struct file *file)
+int security_binder_transfer_file(const struct cred *from, const struct cred *to, struct file *file)
 {
 	return security_ops->binder_transfer_file(from, to, file);
 }
diff --git a/security/selinux/hooks.c b/security/selinux/hooks.c
index cfd8a37a2d35..f14808c87720 100644
--- a/security/selinux/hooks.c
+++ b/security/selinux/hooks.c
@@ -1895,19 +1895,16 @@ static inline u32 open_file_to_av(struct file *file)
 
 /* Hook functions begin here. */
 
-static int selinux_binder_set_context_mgr(struct task_struct *mgr)
+static int selinux_binder_set_context_mgr(const struct cred *mgr)
 {
-	u32 mysid = current_sid();
-	u32 mgrsid = task_sid(mgr);
-
-	return avc_has_perm(mysid, mgrsid, SECCLASS_BINDER, BINDER__SET_CONTEXT_MGR, NULL);
+	return avc_has_perm(current_sid(), cred_sid(mgr), SECCLASS_BINDER, BINDER__SET_CONTEXT_MGR, NULL);
 }
 
-static int selinux_binder_transaction(struct task_struct *from, struct task_struct *to)
+static int selinux_binder_transaction(const struct cred *from, const struct cred *to)
 {
 	u32 mysid = current_sid();
-	u32 fromsid = task_sid(from);
-	u32 tosid = task_sid(to);
+	u32 fromsid = cred_sid(from);
+	u32 tosid = cred_sid(to);
 	int rc;
 
 	if (mysid != fromsid) {
@@ -1919,16 +1916,14 @@ static int selinux_binder_transaction(struct task_struct *from, struct task_stru
 	return avc_has_perm(fromsid, tosid, SECCLASS_BINDER, BINDER__CALL, NULL);
 }
 
-static int selinux_binder_transfer_binder(struct task_struct *from, struct task_struct *to)
+static int selinux_binder_transfer_binder(const struct cred *from, const struct cred *to)
 {
-	u32 fromsid = task_sid(from);
-	u32 tosid = task_sid(to);
-	return avc_has_perm(fromsid, tosid, SECCLASS_BINDER, BINDER__TRANSFER, NULL);
+	return avc_has_perm(cred_sid(from), cred_sid(to), SECCLASS_BINDER, BINDER__TRANSFER, NULL);
 }
 
-static int selinux_binder_transfer_file(struct task_struct *from, struct task_struct *to, struct file *file)
+static int selinux_binder_transfer_file(const struct cred *from, const struct cred *to, struct file *file)
 {
-	u32 sid = task_sid(to);
+	u32 sid = cred_sid(to);
 	struct file_security_struct *fsec = file->f_security;
 	struct inode *inode = file->f_path.dentry->d_inode;
 	struct inode_security_struct *isec = inode->i_security;
