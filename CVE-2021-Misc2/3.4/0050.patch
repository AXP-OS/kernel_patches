From 4461f47521156e038b332cd923943b621c720183 Mon Sep 17 00:00:00 2001
From: Dibyendu Roy <dibyen@codeaurora.org>
Date: Thu, 4 Feb 2016 17:28:05 +0530
Subject: [PATCH] radio: iris: Fix SMD channel initialization

Fix multiple times fmsmd_set module parameter set/unset. Add condition to
check whether channel is already opened or closed. This fixes the
incorrect error state caused by consecutive fmsmd_set set or unset.

Change-Id: I8b67e8308d9e8c3c0779c360712c90605e2fbdea
Signed-off-by: Dibyendu Roy <dibyen@codeaurora.org>
Signed-off-by: Rupesh Tatiya <rtatiya@codeaurora.org>
---
 drivers/media/radio/radio-iris-transport.c | 20 +++++++++++++++++---
 drivers/media/radio/radio-iris.c           |  6 +++++-
 2 files changed, 22 insertions(+), 4 deletions(-)

diff --git a/drivers/media/radio/radio-iris-transport.c b/drivers/media/radio/radio-iris-transport.c
index cd2013288b0..a3ce59c3455 100644
--- a/drivers/media/radio/radio-iris-transport.c
+++ b/drivers/media/radio/radio-iris-transport.c
@@ -38,12 +38,14 @@ struct radio_data {
 	struct smd_channel  *fm_channel;
 };
 struct radio_data hs;
-static DEFINE_MUTEX(fm_smd_enable);
+DEFINE_MUTEX(fm_smd_enable);
 static int fmsmd_set;
+static bool chan_opened;
 static int hcismd_fm_set_enable(const char *val, struct kernel_param *kp);
 module_param_call(fmsmd_set, hcismd_fm_set_enable, NULL, &fmsmd_set, 0644);
 static struct work_struct *reset_worker;
 static void radio_hci_smd_deregister(void);
+static void radio_hci_smd_exit(void);
 
 static void radio_hci_smd_destruct(struct radio_hci_dev *hdev)
 {
@@ -173,7 +175,7 @@ static int radio_hci_smd_register_dev(struct radio_data *hsmd)
 		(unsigned long) hsmd);
 	hdev->send  = radio_hci_smd_send_frame;
 	hdev->destruct = radio_hci_smd_destruct;
-	hdev->close_smd = radio_hci_smd_deregister;
+	hdev->close_smd = radio_hci_smd_exit;
 
 	/* Open the SMD Channel and device and register the callback function */
 	rc = smd_named_open_on_edge("APPS_FM", SMD_APPS_WCNSS,
@@ -212,12 +214,24 @@ static void radio_hci_smd_deregister(void)
 
 static int radio_hci_smd_init(void)
 {
-	return radio_hci_smd_register_dev(&hs);
+	int ret;
+
+	/* this should be called with fm_smd_enable lock held */
+	ret = radio_hci_smd_register_dev(&hs);
+	if (ret < 0) {
+		FMDERR("Failed to register smd device");
+		chan_opened = false;
+		return ret;
+	}
+	chan_opened = true;
+	return ret;
 }
 
 static void radio_hci_smd_exit(void)
 {
+	/* this should be called with fm_smd_enable lock held */
 	radio_hci_smd_deregister();
+	chan_opened = false;
 }
 
 static int hcismd_fm_set_enable(const char *val, struct kernel_param *kp)
diff --git a/drivers/media/radio/radio-iris.c b/drivers/media/radio/radio-iris.c
index 4607a3275e1..96ce16b25b0 100644
--- a/drivers/media/radio/radio-iris.c
+++ b/drivers/media/radio/radio-iris.c
@@ -62,6 +62,7 @@ static void radio_hci_cmd_task(unsigned long arg);
 static void radio_hci_rx_task(unsigned long arg);
 static struct video_device *video_get_dev(void);
 static DEFINE_RWLOCK(hci_task_lock);
+extern struct mutex fm_smd_enable;
 
 typedef int (*radio_hci_request_func)(struct radio_hci_dev *hdev,
 		int (*req)(struct
@@ -5194,8 +5195,11 @@ static int iris_fops_release(struct file *file)
 		return retval;
 	}
 END:
-	if (radio->fm_hdev != NULL)
+	if (radio->fm_hdev != NULL) {
+		mutex_lock(&fm_smd_enable);
 		radio->fm_hdev->close_smd();
+		mutex_unlock(&fm_smd_enable);
+	}
 	if (retval < 0)
 		FMDERR("Err on disable FM %d\n", retval);
 
