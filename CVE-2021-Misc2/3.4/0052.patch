From 45668d98772abc4ea6d0aef83d62a7d583dc6cea Mon Sep 17 00:00:00 2001
From: Kamal Negi <kamaln@codeaurora.org>
Date: Thu, 14 Apr 2016 18:36:27 +0530
Subject: [PATCH] radio: iris: Check SMD channel state on init

Add condition to check whether channel is already opened or closed.
This will prevent smd channel to reopen if it is already opened.

Change-Id: I82cbe05062d3ee58969586e70dc46dc829e529f3
Signed-off-by: Kamal Negi <kamaln@codeaurora.org>
---
 drivers/media/radio/radio-iris-transport.c | 16 +++++++++++++---
 drivers/media/radio/radio-iris.c           |  9 ++++++---
 include/media/radio-iris.h                 |  2 +-
 3 files changed, 20 insertions(+), 7 deletions(-)

diff --git a/drivers/media/radio/radio-iris-transport.c b/drivers/media/radio/radio-iris-transport.c
index a3ce59c3455..447716fa597 100644
--- a/drivers/media/radio/radio-iris-transport.c
+++ b/drivers/media/radio/radio-iris-transport.c
@@ -49,7 +49,7 @@ static void radio_hci_smd_exit(void);
 
 static void radio_hci_smd_destruct(struct radio_hci_dev *hdev)
 {
-	radio_hci_unregister_dev(hs.hdev);
+	radio_hci_unregister_dev();
 }
 
 
@@ -170,7 +170,6 @@ static int radio_hci_smd_register_dev(struct radio_data *hsmd)
 	if (hdev == NULL)
 		return -ENODEV;
 
-	hsmd->hdev = hdev;
 	tasklet_init(&hsmd->rx_task, radio_hci_smd_recv_event,
 		(unsigned long) hsmd);
 	hdev->send  = radio_hci_smd_send_frame;
@@ -198,12 +197,13 @@ static int radio_hci_smd_register_dev(struct radio_data *hsmd)
 		return -ENODEV;
 	}
 
+	hsmd->hdev = hdev;
 	return 0;
 }
 
 static void radio_hci_smd_deregister(void)
 {
-	radio_hci_unregister_dev(hs.hdev);
+	radio_hci_unregister_dev();
 	kfree(hs.hdev);
 	hs.hdev = NULL;
 
@@ -216,6 +216,11 @@ static int radio_hci_smd_init(void)
 {
 	int ret;
 
+	if (chan_opened) {
+		FMDBG("Channel is already opened");
+		return 0;
+	}
+
 	/* this should be called with fm_smd_enable lock held */
 	ret = radio_hci_smd_register_dev(&hs);
 	if (ret < 0) {
@@ -229,6 +234,11 @@ static int radio_hci_smd_init(void)
 
 static void radio_hci_smd_exit(void)
 {
+	if (!chan_opened) {
+		FMDBG("Channel already closed");
+		return;
+	}
+
 	/* this should be called with fm_smd_enable lock held */
 	radio_hci_smd_deregister();
 	chan_opened = false;
diff --git a/drivers/media/radio/radio-iris.c b/drivers/media/radio/radio-iris.c
index 34f3749af36..38ca4e16a21 100644
--- a/drivers/media/radio/radio-iris.c
+++ b/drivers/media/radio/radio-iris.c
@@ -618,13 +618,16 @@ int radio_hci_register_dev(struct radio_hci_dev *hdev)
 }
 EXPORT_SYMBOL(radio_hci_register_dev);
 
-int radio_hci_unregister_dev(struct radio_hci_dev *hdev)
+int radio_hci_unregister_dev(void)
 {
 	struct iris_device *radio = video_get_drvdata(video_get_dev());
-	if (!radio) {
-		FMDERR(":radio is null");
+	struct radio_hci_dev *hdev = NULL;
+
+	if (!radio && !radio->fm_hdev) {
+		FMDERR("radio/hdev is null");
 		return -EINVAL;
 	}
+	hdev = radio->fm_hdev;
 
 	tasklet_kill(&hdev->rx_task);
 	tasklet_kill(&hdev->cmd_task);
diff --git a/include/media/radio-iris.h b/include/media/radio-iris.h
index f564e13544e..56e381b9a1c 100644
--- a/include/media/radio-iris.h
+++ b/include/media/radio-iris.h
@@ -185,7 +185,7 @@ struct radio_hci_dev {
 };
 
 int radio_hci_register_dev(struct radio_hci_dev *hdev);
-int radio_hci_unregister_dev(struct radio_hci_dev *hdev);
+int radio_hci_unregister_dev(void);
 int radio_hci_recv_frame(struct sk_buff *skb);
 int radio_hci_send_cmd(struct radio_hci_dev *hdev, __u16 opcode, __u32 plen,
 	void *param);
