From 18be83da4ae3b93c5754e2ceb3d870ee1cc8a288 Mon Sep 17 00:00:00 2001
From: google <android@google.com>
Date: Mon, 13 Nov 2017 18:26:51 -0800
Subject: [PATCH] wlan: Change local variables to dynamic in
 limProcessAuthFrame Currently limProcessAuthFrame stack frame size exceeds
 1024 and causes build failures for 32 bit platforms.

Move multiple variables from local to dynamic allocation to reduce the
frame size of limProcessAuthFrame.

Change-Id: I83cf5ab24693e0ce012894d808ac79bf37fa9a08
CRs-Fixed: 2083572
Fix CVE-2017-11015

Change-Id: Ifb1971d07ba99705f14d693a6d9a484f71a48c67
---
 .../CORE/MAC/src/pe/lim/limProcessAuthFrame.c | 370 ++++++++++--------
 1 file changed, 217 insertions(+), 153 deletions(-)

diff --git a/drivers/staging/prima/CORE/MAC/src/pe/lim/limProcessAuthFrame.c b/drivers/staging/prima/CORE/MAC/src/pe/lim/limProcessAuthFrame.c
index 01b581c4ac80..34675246cb28 100644
--- a/drivers/staging/prima/CORE/MAC/src/pe/lim/limProcessAuthFrame.c
+++ b/drivers/staging/prima/CORE/MAC/src/pe/lim/limProcessAuthFrame.c
@@ -156,12 +156,14 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
 {
     tANI_U8                 *pBody, keyId, cfgPrivacyOptImp,
                             defaultKey[SIR_MAC_KEY_LENGTH],
-                            encrAuthFrame[LIM_ENCR_AUTH_BODY_LEN],
-                            plainBody[256];
+                            *encrAuthFrame = NULL,
+                            *plainBody = NULL;
     tANI_U16                frameLen;
     //tANI_U32                authRspTimeout, maxNumPreAuth, val;
     tANI_U32                maxNumPreAuth, val;
-    tSirMacAuthFrameBody    *pRxAuthFrameBody, rxAuthFrame, authFrame;
+    tSirMacAuthFrameBody    *pRxAuthFrameBody,
+                            *rxAuthFrame = NULL,
+                            *authFrame = NULL;
     tpSirMacMgmtHdr         pHdr;
     tCfgWepKeyEntry         *pKeyMapEntry = NULL;
     struct tLimPreAuthNode  *pAuthNode;
@@ -169,7 +171,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
     tANI_U8                 decryptResult;
     tANI_U8                 *pChallenge;
     tANI_U32                key_length=8;
-    tANI_U8                 challengeTextArray[SIR_MAC_AUTH_CHALLENGE_LENGTH];
+    tANI_U8                 *challengeTextArray = NULL;
     tpDphHashNode           pStaDs = NULL;
     tANI_U16                assocId = 0;
     /* Added For BT -AMP support */
@@ -216,7 +218,44 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
         ccmCfgSetInt(pMac,WNI_CFG_AUTHENTICATE_FAILURE_TIMEOUT ,
                           psessionEntry->defaultAuthFailureTimeout, NULL, eANI_BOOLEAN_FALSE);
     }
-   
+
+    rxAuthFrame = vos_mem_malloc(sizeof(tSirMacAuthFrameBody));
+    if (!rxAuthFrame) {
+        limLog(pMac, LOGE, FL("Failed to allocate memory"));
+        return;
+    }
+
+    authFrame = vos_mem_malloc(sizeof(tSirMacAuthFrameBody));
+    if (!authFrame) {
+        limLog(pMac, LOGE, FL("failed to allocate memory"));
+        goto free;
+    }
+
+    encrAuthFrame = vos_mem_malloc(LIM_ENCR_AUTH_BODY_LEN);
+    if (!encrAuthFrame) {
+        limLog(pMac, LOGE, FL("failed to allocate memory"));
+        goto free;
+    }
+
+    plainBody = vos_mem_malloc(LIM_ENCR_AUTH_BODY_LEN);
+    if (!plainBody) {
+        limLog(pMac, LOGE, FL("failed to allocate memory"));
+        goto free;
+    }
+
+    challengeTextArray = vos_mem_malloc(SIR_MAC_AUTH_CHALLENGE_LENGTH);
+    if(!challengeTextArray) {
+        limLog(pMac, LOGE, FL("failed to allocate memory"));
+        goto free;
+    }
+
+    vos_mem_set(rxAuthFrame, sizeof(tSirMacAuthFrameBody), 0);
+    vos_mem_set(authFrame, sizeof(tSirMacAuthFrameBody), 0);
+    vos_mem_set(encrAuthFrame, LIM_ENCR_AUTH_BODY_LEN, 0);
+    vos_mem_set(plainBody, LIM_ENCR_AUTH_BODY_LEN, 0);
+    vos_mem_set(challengeTextArray, SIR_MAC_AUTH_CHALLENGE_LENGTH, 0);
+
+
     /// Determine if WEP bit is set in the FC or received MAC header
     if (pHdr->fc.wep)
     {
@@ -233,7 +272,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
 
             limSendDeauthMgmtFrame( pMac, eSIR_MAC_MIC_FAILURE_REASON,
                                     pHdr->sa, psessionEntry, FALSE );
-            return;
+            goto free;
         }
 
         // Extract key ID from IV (most 2 bits of 4th byte of IV)
@@ -251,11 +290,11 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
 
         if (psessionEntry->limSystemRole == eLIM_STA_ROLE || psessionEntry->limSystemRole == eLIM_BT_AMP_STA_ROLE)
         {
-            authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-            authFrame.authTransactionSeqNumber = SIR_MAC_AUTH_FRAME_4;
-            authFrame.authStatusCode = eSIR_MAC_CHALLENGE_FAILURE_STATUS;
+            authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+            authFrame->authTransactionSeqNumber = SIR_MAC_AUTH_FRAME_4;
+            authFrame->authStatusCode = eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
-            limSendAuthMgmtFrame(pMac, &authFrame,
+            limSendAuthMgmtFrame(pMac, authFrame,
                                  pHdr->sa,
                                  LIM_NO_WEP_IN_FC,psessionEntry);
             // Log error
@@ -263,7 +302,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                    FL("received Authentication frame with wep bit set on role=%d "MAC_ADDRESS_STR),
                    psessionEntry->limSystemRole, MAC_ADDR_ARRAY(pHdr->sa) );)
 
-            return;
+            goto free;
         }
 
         if (frameLen < LIM_ENCR_AUTH_BODY_LEN)
@@ -274,7 +313,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                    frameLen);
             limPrintMacAddr(pMac, pHdr->sa, LOGE);
 
-            return;
+            goto free;
         }
         if(psessionEntry->limSystemRole == eLIM_AP_ROLE)
         {
@@ -310,13 +349,13 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                  * an Authentication frame with FC bit set.
                  * Send Auth frame4 with 'out of sequence' status code.
                  */
-                authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                authFrame.authTransactionSeqNumber =
+                authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                authFrame->authTransactionSeqNumber =
                 SIR_MAC_AUTH_FRAME_4;
-                authFrame.authStatusCode =
+                authFrame->authStatusCode =
                 eSIR_MAC_AUTH_FRAME_OUT_OF_SEQ_STATUS;
 
-                limSendAuthMgmtFrame(pMac, &authFrame,
+                limSendAuthMgmtFrame(pMac, authFrame,
                                      pHdr->sa,
                                      LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -326,7 +365,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                        "no preauth context with WEP bit set "MAC_ADDRESS_STR),
                        MAC_ADDR_ARRAY(pHdr->sa));)
 
-                return;
+                goto free;
             }
             else
             {
@@ -348,13 +387,13 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * out of sequence Auth frame status code.
                      */
 
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                     SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                     eSIR_MAC_AUTH_FRAME_OUT_OF_SEQ_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -363,7 +402,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                            FL("received Authentication frame from peer that is in state %d "
                            MAC_ADDRESS_STR), pAuthNode->mlmState, MAC_ADDR_ARRAY(pHdr->sa));)
 
-                    return;
+                    goto free;
                 }
             }
 
@@ -382,13 +421,13 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * Send Authentication frame
                      * with challenge failure status code
                      */
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                     SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                     eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -397,7 +436,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                            FL("received Auth frame3 from peer that has NULL key map entry "
                            MAC_ADDRESS_STR),MAC_ADDR_ARRAY(pHdr->sa));)
 
-                    return;
+                    goto free;
                 } // if (!pKeyMapEntry->wepOn)
                 else
                 {
@@ -412,14 +451,14 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                         PELOGW(limLog(pMac, LOGW, FL("=====> decryptResult == LIM_DECRYPT_ICV_FAIL ..."));)
                         limDeletePreAuthNode(pMac,
                                              pHdr->sa);
-                        authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                        authFrame.authTransactionSeqNumber =
+                        authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                        authFrame->authTransactionSeqNumber =
                         SIR_MAC_AUTH_FRAME_4;
-                        authFrame.authStatusCode =
+                        authFrame->authStatusCode =
                         eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
                         limSendAuthMgmtFrame(
-                                            pMac, &authFrame,
+                                            pMac, authFrame,
                                             pHdr->sa,
                                             LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -428,11 +467,15 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                FL("received Authentication frame from peer that failed decryption, Addr "
                                MAC_ADDRESS_STR), MAC_ADDR_ARRAY(pHdr->sa));)
 
-                        return;
+                        goto free;
                     }
 
-                    if ((sirConvertAuthFrame2Struct(pMac, plainBody, frameLen-8, &rxAuthFrame)!=eSIR_SUCCESS)||(!isAuthValid(pMac, &rxAuthFrame,psessionEntry)))
-                        return;
+                    if ( ( sirConvertAuthFrame2Struct(pMac, plainBody, frameLen-8,
+                         rxAuthFrame)!=eSIR_SUCCESS ) ||
+                         ( !isAuthValid(pMac, rxAuthFrame,psessionEntry) ) )
+                    {
+                        goto free;
+                    }
 
 
                 } // end if (pKeyMapEntry->key == NULL)
@@ -463,17 +506,17 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * with challenge failure status code
                      */
 
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                     SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                     eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,psessionEntry);
 
-                    return;
+                    goto free;
                 }
 
                     key_length=val;
@@ -489,14 +532,14 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                         /// ICV failure
                         limDeletePreAuthNode(pMac,
                                              pHdr->sa);
-                        authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                        authFrame.authTransactionSeqNumber =
+                        authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                        authFrame->authTransactionSeqNumber =
                         SIR_MAC_AUTH_FRAME_4;
-                        authFrame.authStatusCode =
+                        authFrame->authStatusCode =
                         eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
                         limSendAuthMgmtFrame(
-                                            pMac, &authFrame,
+                                            pMac, authFrame,
                                             pHdr->sa,
                                             LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -505,11 +548,14 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                FL("received Authentication frame from peer that failed decryption: "
                                MAC_ADDRESS_STR), MAC_ADDR_ARRAY(pHdr->sa));)
 
-                        return;
+                        goto free;
+                    }
+                    if ( ( sirConvertAuthFrame2Struct(pMac, plainBody, frameLen-8,
+                           rxAuthFrame)!=eSIR_SUCCESS ) ||
+                        ( !isAuthValid(pMac, rxAuthFrame, psessionEntry) ) )
+                    {
+                        goto free;
                     }
-                    if ((sirConvertAuthFrame2Struct(pMac, plainBody, frameLen-8, &rxAuthFrame)!=eSIR_SUCCESS)||(!isAuthValid(pMac, &rxAuthFrame,psessionEntry)))
-                        return;
-
             } // End of check for Key Mapping/Default key presence
         }
         else
@@ -523,13 +569,13 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
              * should have been 'unsupported algorithm' status code.
              */
 
-            authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-            authFrame.authTransactionSeqNumber =
+            authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+            authFrame->authTransactionSeqNumber =
             SIR_MAC_AUTH_FRAME_4;
-            authFrame.authStatusCode =
+            authFrame->authStatusCode =
             eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
-            limSendAuthMgmtFrame(pMac, &authFrame,
+            limSendAuthMgmtFrame(pMac, authFrame,
                                  pHdr->sa,
                                  LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -538,19 +584,22 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                    FL("received Authentication frame3 from peer that while privacy option is turned OFF "
                    MAC_ADDRESS_STR), MAC_ADDR_ARRAY(pHdr->sa));)
 
-            return;
+            goto free;
         } // else if (wlan_cfgGetInt(CFG_PRIVACY_OPTION_IMPLEMENTED))
     } // if (fc.wep)
     else
     {
 
-
-        if ((sirConvertAuthFrame2Struct(pMac, pBody, frameLen, &rxAuthFrame)!=eSIR_SUCCESS)||(!isAuthValid(pMac, &rxAuthFrame,psessionEntry)))
-            return;
+        if ( ( sirConvertAuthFrame2Struct(pMac, pBody,
+            frameLen, rxAuthFrame)!=eSIR_SUCCESS ) ||
+            ( !isAuthValid(pMac, rxAuthFrame,psessionEntry) ) )
+        {
+            goto free;
+        }
     }
 
 
-    pRxAuthFrameBody = &rxAuthFrame;
+    pRxAuthFrameBody = rxAuthFrame;
 
    PELOGW(limLog(pMac, LOGW,
            FL("Received Auth frame with type=%d seqnum=%d, status=%d (%d)"),
@@ -652,7 +701,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                         limSendDeauthMgmtFrame(pMac,
                                eSIR_MAC_UNSPEC_FAILURE_REASON, (tANI_U8 *) pAuthNode->peerMacAddr, psessionEntry, FALSE);
                         limTriggerSTAdeletion(pMac, pStaDs, psessionEntry);
-                        return;
+                        goto free;
                     }
                 }
                 else
@@ -662,8 +711,9 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * but ACK lost at STA side, in this case 2nd auth frame is already 
                      * in transmission queue
                      * */
-                    PELOGE(limLog(pMac, LOGE, FL("STA is initiating Authentication after ACK lost..."));)
-                    return;
+                    PELOGE(limLog(pMac, LOGE, FL("STA is initiating "
+                    "Authentication after ACK lost..."));)
+                    goto free;
                 }
             }
             if (wlan_cfgGetInt(pMac, WNI_CFG_MAX_NUM_PRE_AUTH,
@@ -683,18 +733,18 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                  * reached. Send Authentication frame
                  * with unspecified failure
                  */
-                authFrame.authAlgoNumber =
+                authFrame->authAlgoNumber =
                 pRxAuthFrameBody->authAlgoNumber;
-                authFrame.authTransactionSeqNumber =
+                authFrame->authTransactionSeqNumber =
                 pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                authFrame.authStatusCode =
+                authFrame->authStatusCode =
                 eSIR_MAC_UNSPEC_FAILURE_STATUS;
 
-                limSendAuthMgmtFrame(pMac, &authFrame,
+                limSendAuthMgmtFrame(pMac, authFrame,
                                      pHdr->sa,
                                      LIM_NO_WEP_IN_FC,psessionEntry);
 
-                return;
+                goto free;
             }
             /// No Pre-auth context exists for the STA.
             if (limIsAuthAlgoSupported(
@@ -715,7 +765,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                    FL("Max pre-auth nodes reached "));
                             limPrintMacAddr(pMac, pHdr->sa, LOGW);
 
-                            return;
+                            goto free;
                         }
 
                         PELOG1(limLog(pMac, LOG1, FL("Alloc new data: %x peer "), pAuthNode);
@@ -739,13 +789,13 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                          * status code.
                          */
 
-                        authFrame.authAlgoNumber =
+                        authFrame->authAlgoNumber =
                         pRxAuthFrameBody->authAlgoNumber;
-                        authFrame.authTransactionSeqNumber =
+                        authFrame->authTransactionSeqNumber =
                         pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                        authFrame.authStatusCode = eSIR_MAC_SUCCESS_STATUS;
+                        authFrame->authStatusCode = eSIR_MAC_SUCCESS_STATUS;
                         limSendAuthMgmtFrame(
-                                            pMac, &authFrame,
+                                            pMac, authFrame,
                                             pHdr->sa,
                                             LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -792,15 +842,15 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                              * code.
                              */
 
-                            authFrame.authAlgoNumber =
+                            authFrame->authAlgoNumber =
                             pRxAuthFrameBody->authAlgoNumber;
-                            authFrame.authTransactionSeqNumber =
+                            authFrame->authTransactionSeqNumber =
                             pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                            authFrame.authStatusCode =
+                            authFrame->authStatusCode =
                             eSIR_MAC_AUTH_ALGO_NOT_SUPPORTED_STATUS;
 
                             limSendAuthMgmtFrame(
-                                                pMac, &authFrame,
+                                                pMac, authFrame,
                                                 pHdr->sa,
                                                 LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -810,7 +860,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                    MAC_ADDRESS_STR), pRxAuthFrameBody->authAlgoNumber, 
                                    MAC_ADDR_ARRAY(pHdr->sa));)
 
-                            return;
+                            goto free;
                         }
                         else
                         {
@@ -824,7 +874,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                        FL("Max pre-auth nodes reached "));
                                 limPrintMacAddr(pMac, pHdr->sa, LOGW);
 
-                                return;
+                                goto free;
                             }
 
                             palCopyMemory( pMac->hHdd,
@@ -859,31 +909,33 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                  * unspecified failure status code.
                                  */
 
-                                authFrame.authAlgoNumber =
+                                authFrame->authAlgoNumber =
                                         pRxAuthFrameBody->authAlgoNumber;
-                                authFrame.authTransactionSeqNumber =
+                                authFrame->authTransactionSeqNumber =
                                         pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                                authFrame.authStatusCode =
+                                authFrame->authStatusCode =
                                         eSIR_MAC_UNSPEC_FAILURE_STATUS;
 
-                                limSendAuthMgmtFrame(pMac, &authFrame,
+                                limSendAuthMgmtFrame(pMac, authFrame,
                                                      pHdr->sa,
                                                      LIM_NO_WEP_IN_FC,psessionEntry);
 
                                 limDeletePreAuthNode(pMac, pHdr->sa);
-                                return;
+                                goto free;
                             }
 
                             limActivateAuthRspTimer(pMac, pAuthNode);
 
                             pAuthNode->fTimerStarted = 1;
 
-                            // get random bytes and use as
-                            // challenge text
-                            // TODO
-                            //if( !VOS_IS_STATUS_SUCCESS( vos_rand_get_bytes( 0, (tANI_U8 *)challengeTextArray, SIR_MAC_AUTH_CHALLENGE_LENGTH ) ) )
+                            /*
+                             * get random bytes and use as challenge text
+                             */
+                            if( !VOS_IS_STATUS_SUCCESS( vos_rand_get_bytes( 0, (tANI_U8 *)challengeTextArray, SIR_MAC_AUTH_CHALLENGE_LENGTH ) ) )
                             {
-                               limLog(pMac, LOGE,FL("Challenge text preparation failed in limProcessAuthFrame"));
+                               limLog(pMac, LOGE,FL("Challenge text "
+                               "preparation failed in limProcessAuthFrame"));
+                               goto free;
                             }
                             
                             pChallenge = pAuthNode->challengeText;
@@ -897,21 +949,20 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                              * Sending Authenticaton frame with challenge.
                              */
 
-                            authFrame.authAlgoNumber =
+                            authFrame->authAlgoNumber =
                             pRxAuthFrameBody->authAlgoNumber;
-                            authFrame.authTransactionSeqNumber =
+                            authFrame->authTransactionSeqNumber =
                             pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                            authFrame.authStatusCode =
+                            authFrame->authStatusCode =
                             eSIR_MAC_SUCCESS_STATUS;
-                            authFrame.type   = SIR_MAC_CHALLENGE_TEXT_EID;
-                            authFrame.length = SIR_MAC_AUTH_CHALLENGE_LENGTH;
-                            palCopyMemory( pMac->hHdd,
-                                         authFrame.challengeText,
+                            authFrame->type   = SIR_MAC_CHALLENGE_TEXT_EID;
+                            authFrame->length = SIR_MAC_AUTH_CHALLENGE_LENGTH;
+                            palCopyMemory( pMac->hHdd,authFrame->challengeText,
                                          pAuthNode->challengeText,
                                          SIR_MAC_AUTH_CHALLENGE_LENGTH);
 
                             limSendAuthMgmtFrame(
-                                                pMac, &authFrame,
+                                                pMac, authFrame,
                                                 pHdr->sa,
                                                 LIM_NO_WEP_IN_FC,psessionEntry);
                         } // if (wlan_cfgGetInt(CFG_PRIVACY_OPTION_IMPLEMENTED))
@@ -927,15 +978,15 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                          * with auth algorithm not supported status code
                          */
 
-                        authFrame.authAlgoNumber =
+                        authFrame->authAlgoNumber =
                         pRxAuthFrameBody->authAlgoNumber;
-                        authFrame.authTransactionSeqNumber =
+                        authFrame->authTransactionSeqNumber =
                         pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                        authFrame.authStatusCode =
+                        authFrame->authStatusCode =
                         eSIR_MAC_AUTH_ALGO_NOT_SUPPORTED_STATUS;
 
                         limSendAuthMgmtFrame(
-                                            pMac, &authFrame,
+                                            pMac, authFrame,
                                             pHdr->sa,
                                             LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -945,7 +996,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                MAC_ADDRESS_STR), pRxAuthFrameBody->authAlgoNumber, 
                                MAC_ADDR_ARRAY(pHdr->sa));)
 
-                        return;
+                        goto free;
                 } // end switch(pRxAuthFrameBody->authAlgoNumber)
             } // if (limIsAuthAlgoSupported(pRxAuthFrameBody->authAlgoNumber))
             else
@@ -955,14 +1006,14 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                  * authentication algorithm requested by sending party.
                  * Reject Authentication with StatusCode=13.
                  */
-                authFrame.authAlgoNumber =
+                authFrame->authAlgoNumber =
                 pRxAuthFrameBody->authAlgoNumber;
-                authFrame.authTransactionSeqNumber =
+                authFrame->authTransactionSeqNumber =
                 pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                authFrame.authStatusCode =
+                authFrame->authStatusCode =
                 eSIR_MAC_AUTH_ALGO_NOT_SUPPORTED_STATUS;
 
-                limSendAuthMgmtFrame(pMac, &authFrame,
+                limSendAuthMgmtFrame(pMac, authFrame,
                                      pHdr->sa,
                                      LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -971,7 +1022,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                        FL("received Authentication frame for unsupported auth algorithm %d "
                        MAC_ADDRESS_STR), pRxAuthFrameBody->authAlgoNumber, 
                        MAC_ADDR_ARRAY(pHdr->sa));)
-                return;
+                goto free;
             } //end if (limIsAuthAlgoSupported(pRxAuthFrameBody->authAlgoNumber))
             break;
 
@@ -991,7 +1042,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                        psessionEntry->limMlmState);)
                 PELOG1(limPrintMacAddr(pMac, pHdr->sa, LOG1);)
 
-                return;
+                goto free;
             }
 
             if ( !palEqualMemory( pMac->hHdd,(tANI_U8 *) pHdr->sa,
@@ -1065,7 +1116,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                FL("Max pre-auth nodes reached "));
                         limPrintMacAddr(pMac, pHdr->sa, LOGW);
 
-                        return;
+                        goto free;
                     }
 
                     PELOG1(limLog(pMac, LOG1, FL("Alloc new data: %x peer "), pAuthNode);)
@@ -1116,17 +1167,17 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                MAC_ADDRESS_STR), pRxAuthFrameBody->authAlgoNumber, 
                                MAC_ADDR_ARRAY(pHdr->sa));)
 
-                        authFrame.authAlgoNumber =
+                        authFrame->authAlgoNumber =
                         pRxAuthFrameBody->authAlgoNumber;
-                        authFrame.authTransactionSeqNumber =
+                        authFrame->authTransactionSeqNumber =
                         pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                        authFrame.authStatusCode =
+                        authFrame->authStatusCode =
                         eSIR_MAC_AUTH_ALGO_NOT_SUPPORTED_STATUS;
 
-                        limSendAuthMgmtFrame(pMac, &authFrame,
+                        limSendAuthMgmtFrame(pMac, authFrame,
                                             pHdr->sa,
                                             LIM_NO_WEP_IN_FC,psessionEntry);
-                        return;
+                        goto free;
                     }
                     else
                     {
@@ -1138,7 +1189,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                             PELOGE(limLog(pMac, LOGE,
                                    FL("received Auth frame with invalid challenge text IE"));)
 
-                            return;
+                            goto free;
                         }
 
                         /**
@@ -1157,14 +1208,14 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                  * Send Auth frame with
                                  * challenge failure status code
                                  */
-                                authFrame.authAlgoNumber =
+                                authFrame->authAlgoNumber =
                                 pRxAuthFrameBody->authAlgoNumber;
-                                authFrame.authTransactionSeqNumber =
+                                authFrame->authTransactionSeqNumber =
                                 pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                                authFrame.authStatusCode =
+                                authFrame->authStatusCode =
                                 eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
-                                limSendAuthMgmtFrame(pMac, &authFrame,
+                                limSendAuthMgmtFrame(pMac, authFrame,
                                                      pHdr->sa,
                                                      LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -1176,7 +1227,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                 limRestoreFromAuthState(pMac, eSIR_SME_NO_KEY_MAPPING_KEY_FOR_PEER,
                                                               eSIR_MAC_UNSPEC_FAILURE_REASON,psessionEntry);
 
-                                return;
+                                goto free;
                             } // if (pKeyMapEntry->key == NULL)
                             else
                             {
@@ -1240,15 +1291,15 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                                 limLog(pMac, LOGP,
                                        FL("could not retrieve Default key"));
 
-                                authFrame.authAlgoNumber =
+                                authFrame->authAlgoNumber =
                                 pRxAuthFrameBody->authAlgoNumber;
-                                authFrame.authTransactionSeqNumber =
+                                authFrame->authTransactionSeqNumber =
                                 pRxAuthFrameBody->authTransactionSeqNumber + 1;
-                                authFrame.authStatusCode =
+                                authFrame->authStatusCode =
                                 eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
                                 limSendAuthMgmtFrame(
-                                                    pMac, &authFrame,
+                                                    pMac, authFrame,
                                                     pHdr->sa,
                                                     LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -1317,13 +1368,13 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                  * Shared Key authentication type. Reject with Auth frame4
                  * with 'out of sequence' status code.
                  */
-                authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                authFrame.authTransactionSeqNumber =
+                authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                authFrame->authTransactionSeqNumber =
                 SIR_MAC_AUTH_FRAME_4;
-                authFrame.authStatusCode =
+                authFrame->authStatusCode =
                 eSIR_MAC_AUTH_FRAME_OUT_OF_SEQ_STATUS;
 
-                limSendAuthMgmtFrame(pMac, &authFrame,
+                limSendAuthMgmtFrame(pMac, authFrame,
                                      pHdr->sa,
                                      LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -1333,7 +1384,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                        MAC_ADDRESS_STR), pRxAuthFrameBody->authAlgoNumber, 
                        MAC_ADDR_ARRAY(pHdr->sa));)
 
-                return;
+                goto free;
             }
 
             if (psessionEntry->limSystemRole == eLIM_AP_ROLE || psessionEntry->limSystemRole == eLIM_BT_AMP_AP_ROLE ||
@@ -1347,13 +1398,13 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                 if (!pHdr->fc.wep)
                 {
                     /// WEP bit is not set in FC of Auth Frame3
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                     SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                     eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -1362,7 +1413,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                            FL("received Auth frame3 from peer with no WEP bit set "MAC_ADDRESS_STR),
                            MAC_ADDR_ARRAY(pHdr->sa));)
 
-                    return;
+                    goto free;
                 }
 
                 pAuthNode = limSearchPreAuthList(pMac,
@@ -1376,13 +1427,13 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * Send Auth frame4 with 'out of sequence'
                      * status code.
                      */
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                     SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                     eSIR_MAC_AUTH_FRAME_OUT_OF_SEQ_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -1391,7 +1442,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                            FL("received AuthFrame3 from peer that has no preauth context "
                            MAC_ADDRESS_STR), MAC_ADDR_ARRAY(pHdr->sa));)
 
-                    return;
+                    goto free;
                 }
 
                 if (pAuthNode->mlmState == eLIM_MLM_AUTH_RSP_TIMEOUT_STATE)
@@ -1401,14 +1452,14 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * Reject by sending Auth Frame4 with
                      * Auth respone timeout Status Code.
                      */
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                     SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                     eSIR_MAC_AUTH_RSP_TIMEOUT_STATUS;
 
                     limSendAuthMgmtFrame(
-                                        pMac, &authFrame,
+                                        pMac, authFrame,
                                         pHdr->sa,
                                         LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -1421,7 +1472,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                     limDeletePreAuthNode(pMac,
                                          pHdr->sa);
 
-                    return;
+                    goto free;
                 } // end switch (pAuthNode->mlmState)
 
                 if (pRxAuthFrameBody->authStatusCode != eSIR_MAC_SUCCESS_STATUS)
@@ -1438,7 +1489,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                            MAC_ADDRESS_STR), pRxAuthFrameBody->authStatusCode, 
                            MAC_ADDR_ARRAY(pHdr->sa));)
 
-                    return;
+                    goto free;
                 }
 
                 /**
@@ -1463,12 +1514,12 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                     /**
                      * Send Authentication Frame4 with 'success' Status Code.
                      */
-                    authFrame.authAlgoNumber = eSIR_SHARED_KEY;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authAlgoNumber = eSIR_SHARED_KEY;
+                    authFrame->authTransactionSeqNumber =
                         SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode = eSIR_MAC_SUCCESS_STATUS;
+                    authFrame->authStatusCode = eSIR_MAC_SUCCESS_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -1496,14 +1547,14 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                      * delete STA context.
                      */
 
-                    authFrame.authAlgoNumber =
+                    authFrame->authAlgoNumber =
                         pRxAuthFrameBody->authAlgoNumber;
-                    authFrame.authTransactionSeqNumber =
+                    authFrame->authTransactionSeqNumber =
                         SIR_MAC_AUTH_FRAME_4;
-                    authFrame.authStatusCode =
+                    authFrame->authStatusCode =
                         eSIR_MAC_CHALLENGE_FAILURE_STATUS;
 
-                    limSendAuthMgmtFrame(pMac, &authFrame,
+                    limSendAuthMgmtFrame(pMac, authFrame,
                                          pHdr->sa,
                                          LIM_NO_WEP_IN_FC,psessionEntry);
 
@@ -1511,7 +1562,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                     PELOGE( limLog(pMac, LOGW,
                                    FL("Challenge failure for peer "MAC_ADDRESS_STR),
                                    MAC_ADDR_ARRAY(pHdr->sa));)
-                    return;
+                    goto free;
                 }
             } // if (pMac->lim.gLimSystemRole == eLIM_AP_ROLE || ...
 
@@ -1532,7 +1583,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                        psessionEntry->limMlmState);)
                PELOG1( limPrintMacAddr(pMac, pHdr->sa, LOG1);)
 
-                return;
+                goto free;
             }
 
             if (pRxAuthFrameBody->authAlgoNumber != eSIR_SHARED_KEY)
@@ -1550,7 +1601,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                        MAC_ADDRESS_STR), pRxAuthFrameBody->authAlgoNumber, 
                        MAC_ADDR_ARRAY(pHdr->sa));)
 
-                return;
+                goto free;
             }
 
             if ( !palEqualMemory( pMac->hHdd,(tANI_U8 *) pHdr->sa,
@@ -1605,7 +1656,7 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
                            FL("Max pre-auth nodes reached "));
                     limPrintMacAddr(pMac, pHdr->sa, LOGW);
 
-                    return;
+                    goto free;
                 }
                 PELOG1(limLog(pMac, LOG1, FL("Alloc new data: %x peer "), pAuthNode);
                 limPrintMacAddr(pMac, pHdr->sa, LOG1);)
@@ -1650,6 +1701,19 @@ limProcessAuthFrame(tpAniSirGlobal pMac, tANI_U8 *pRxPacketInfo, tpPESession pse
 
             break;
     } // end switch (pRxAuthFrameBody->authTransactionSeqNumber)
+    
+free:
+    if (authFrame)
+        vos_mem_free(authFrame);
+    if (rxAuthFrame)
+        vos_mem_free(rxAuthFrame);
+    if (encrAuthFrame)
+        vos_mem_free(encrAuthFrame);
+    if (plainBody)
+        vos_mem_free(plainBody);
+    if (challengeTextArray)
+        vos_mem_free(challengeTextArray);
+
 } /*** end limProcessAuthFrame() ***/
 
 
