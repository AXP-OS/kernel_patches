From f7cafe03ab52465acfba2e62c6b4da354723cee3 Mon Sep 17 00:00:00 2001
From: Sumukh Hallymysore Ravindra <quic_shallymy@quicinc.com>
Date: Fri, 1 Apr 2022 11:49:42 +0530
Subject: [PATCH] msm: synx: release reference holding the lock

The reference acquired by the synx release function
at the start of the function is decremented outside
the mutex lock.
Also fix index value used while acquiring lock during
table read as row->index variable can be cleaned
by release function.

Change-Id: Id8edda1b90411e3b51d6859762d31f7ec42c530b
Signed-off-by: Sumukh Hallymysore Ravindra <quic_shallymy@quicinc.com>
---
 drivers/media/platform/msm/synx/synx.c         |  5 ++++-
 drivers/media/platform/msm/synx/synx_debugfs.c | 11 ++++++++---
 drivers/media/platform/msm/synx/synx_util.c    |  5 +++++
 3 files changed, 17 insertions(+), 4 deletions(-)

diff --git a/drivers/media/platform/msm/synx/synx.c b/drivers/media/platform/msm/synx/synx.c
index 4006ebbd4167..58592caee285 100644
--- a/drivers/media/platform/msm/synx/synx.c
+++ b/drivers/media/platform/msm/synx/synx.c
@@ -1,6 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0-only
 /*
  * Copyright (c) 2019-2021, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2022, Qualcomm Innovation Center, Inc. All rights reserved.
  */
 #define pr_fmt(fmt) "synx: " fmt
 
@@ -549,7 +550,7 @@ int synx_release(s32 synx_obj)
 
 	fence = row->fence;
 	rc = synx_release_core(row);
-	dma_fence_put(fence);
+	synx_release_handle(row);
 	return rc;
 }
 
@@ -1599,6 +1600,8 @@ int synx_initialize(struct synx_initialization_params *params)
 
 	mutex_lock(&synx_dev->table_lock);
 	synx_dev->open_cnt++;
+	/* zero handle not allowed */
+	set_bit(0, synx_dev->bitmap);
 	mutex_unlock(&synx_dev->table_lock);
 
 	if (params)
diff --git a/drivers/media/platform/msm/synx/synx_debugfs.c b/drivers/media/platform/msm/synx/synx_debugfs.c
index 4c552527c131..8ae284d7fad8 100644
--- a/drivers/media/platform/msm/synx/synx_debugfs.c
+++ b/drivers/media/platform/msm/synx/synx_debugfs.c
@@ -53,6 +53,7 @@ static ssize_t synx_table_read(struct file *file,
 	int i = 0;
 	int state = SYNX_STATE_INVALID;
 	ssize_t len = 0;
+	s32 index;
 
 	dbuf = kzalloc(MAX_DBG_BUF_SIZE, GFP_KERNEL);
 	if (!dbuf)
@@ -69,10 +70,14 @@ static ssize_t synx_table_read(struct file *file,
 	for (i = 0; i < SYNX_MAX_OBJS; i++) {
 		row = &dev->synx_table[i];
 
-		if (!row->index)
+		index = row->index;
+		mutex_lock(&dev->row_locks[index]);
+		if (!row->index) {
+			mutex_unlock(&dev->row_locks[index]);
+			pr_warn("synx obj at %d invalid\n", index);
 			continue;
+		}
 
-		mutex_lock(&dev->row_locks[row->index]);
 		if (columns & NAME_COLUMN)
 			cur += scnprintf(cur, end - cur,
 				"|%10s|", row->name);
@@ -92,7 +97,7 @@ static ssize_t synx_table_read(struct file *file,
 				cur,
 				end);
 		}
-		mutex_unlock(&dev->row_locks[row->index]);
+		mutex_unlock(&dev->row_locks[index]);
 		cur += scnprintf(cur, end - cur, "\n");
 	}
 	if (columns & ERROR_CODES && !list_empty(
diff --git a/drivers/media/platform/msm/synx/synx_util.c b/drivers/media/platform/msm/synx/synx_util.c
index 6b0cf44ee6a6..f27bb9ebd236 100644
--- a/drivers/media/platform/msm/synx/synx_util.c
+++ b/drivers/media/platform/msm/synx/synx_util.c
@@ -1,6 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0-only
 /*
  * Copyright (c) 2019, 2021, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2022, Qualcomm Innovation Center, Inc. All rights reserved.
  */
 #define pr_fmt(fmt) "synx: " fmt
 
@@ -605,11 +606,15 @@ void *synx_from_handle(s32 synx_obj)
 void synx_release_handle(void *pObj)
 {
 	struct synx_table_row *row = pObj;
+	s32 idx;
 
 	if (!row)
 		return;
 
+	idx = row->index;
+	mutex_lock(&synx_dev->row_locks[idx]);
 	dma_fence_put(row->fence);
+	mutex_unlock(&synx_dev->row_locks[idx]);
 }
 
 s32 synx_create_handle(void *pObj)
-- 
GitLab

