From d78c4ee855aa2ee1705011723f5ec9e1d33d2ed8 Mon Sep 17 00:00:00 2001
From: Sumukh Hallymysore Ravindra <quic_shallymy@quicinc.com>
Date: Thu, 18 Nov 2021 18:55:51 +0530
Subject: [PATCH] msm: synx: remove hash entry on fence registration failure

Change removes the entry from camera hash id table
in cases when csl fence registration fails, which
otherwise could lead to dangling pointer issues.

Change-Id: I2bb084b742109db2c9d21997f15cc62e269a2022
Signed-off-by: Sumukh Hallymysore Ravindra <quic_shallymy@quicinc.com>
---
 drivers/media/platform/msm/synx/synx.c | 30 ++++++++++++++++++++------
 1 file changed, 24 insertions(+), 6 deletions(-)

diff --git a/drivers/media/platform/msm/synx/synx.c b/drivers/media/platform/msm/synx/synx.c
index 8937361127f3..3b6d2f2a6440 100644
--- a/drivers/media/platform/msm/synx/synx.c
+++ b/drivers/media/platform/msm/synx/synx.c
@@ -859,6 +859,7 @@ int synx_bind(struct synx_session session_id,
 	struct synx_coredata *synx_obj;
 	struct synx_external_data *data = NULL;
 	struct bind_operations *bind_ops = NULL;
+	struct hash_key_data *entry = NULL;
 
 	pr_debug("[sess: %u] Enter bind from pid %d\n",
 		session_id.client_id, current->pid);
@@ -938,14 +939,31 @@ int synx_bind(struct synx_session session_id,
 	synx_obj->num_bound_synxs++;
 	mutex_unlock(&synx_obj->obj_lock);
 
-	synx_util_save_data(external_sync.id[0],
-		external_sync.type, (void *)synx_obj);
-
-	rc = bind_ops->register_callback(synx_external_callback,
+	rc = synx_util_save_data(external_sync.id[0],
+			external_sync.type, (void *)synx_obj);
+	if (!rc) {
+		rc = bind_ops->register_callback(synx_external_callback,
 			data, external_sync.id[0]);
+		if (rc) {
+			pr_err("[sess: %u] callback registration failed for %d\n",
+				client->id, external_sync.id[0]);
+			entry = synx_util_retrieve_data(external_sync.id[0],
+						external_sync.type);
+			if (entry) {
+				pr_info("[sess: %u] retrieved %u, synx obj %pK\n",
+					client->id, entry->key, entry->data);
+				spin_lock_bh(&camera_tbl_lock);
+				hash_del(&entry->node);
+				spin_unlock_bh(&camera_tbl_lock);
+				kfree(entry);
+			} else {
+				pr_warn("[sess: %u] entry already cleared for %d\n",
+					client->id, external_sync.id[0]);
+			}
+		}
+	}
+
 	if (rc) {
-		pr_err("[sess: %u] callback registration failed for %d\n",
-			client->id, external_sync.id[0]);
 		mutex_lock(&synx_obj->obj_lock);
 		memset(&synx_obj->bound_synxs[bound_idx], 0,
 			sizeof(struct synx_external_desc));
-- 
GitLab

