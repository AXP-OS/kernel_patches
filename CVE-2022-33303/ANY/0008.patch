From bc672049f83e5eb4d058590e773f3294bc396f67 Mon Sep 17 00:00:00 2001
From: Elliot Berman <quic_eberman@quicinc.com>
Date: Mon, 2 May 2022 14:22:13 -0700
Subject: [PATCH] virt: gunyah: rm_core: Use a single buffer to process
 messages from RM

The message buffer received by gh_msgq_recv is now not directly used by
any upper layers and always copied to a "buff" in gh_rm_connection, so
the same buffer can be re-used in the gh_msgq_recv loop.

Change-Id: I92988711b84b6f1e6b653c7d8cb5b66abc7a322e
Signed-off-by: Elliot Berman <quic_eberman@quicinc.com>
---
 drivers/virt/gunyah/gh_rm_core.c | 19 ++++++-------------
 1 file changed, 6 insertions(+), 13 deletions(-)

diff --git a/drivers/virt/gunyah/gh_rm_core.c b/drivers/virt/gunyah/gh_rm_core.c
index 8d3e7009a4419..6f441bcbb50a9 100644
--- a/drivers/virt/gunyah/gh_rm_core.c
+++ b/drivers/virt/gunyah/gh_rm_core.c
@@ -394,11 +394,6 @@ struct gh_rm_connection *gh_rm_process_rply(void *recv_buff, size_t recv_buff_si
 
 	connection->rm_error = reply_hdr->err_code;
 
-	/* All the processing functions would have trimmed-off the header
-	 * and copied the data to connection->recv_buff. Hence, it's okay
-	 * to release the original packet that arrived.
-	 */
-	kfree(recv_buff);
 	return connection;
 }
 
@@ -497,23 +492,20 @@ static int gh_rm_recv_task_fn(void *data)
 	void *recv_buff;
 	int ret;
 
-	while (!kthread_should_stop()) {
-		recv_buff = kzalloc(GH_MSGQ_MAX_MSG_SIZE_BYTES, GFP_KERNEL);
-		if (!recv_buff)
-			continue;
+	recv_buff = kzalloc(GH_MSGQ_MAX_MSG_SIZE_BYTES, GFP_KERNEL);
+	if (!recv_buff)
+		return -ENOMEM;
 
+	while (!kthread_should_stop()) {
 		/* Block until a new message is received */
 		ret = gh_msgq_recv(gh_rm_msgq_desc, recv_buff,
 					GH_MSGQ_MAX_MSG_SIZE_BYTES,
 					&recv_buff_size, 0);
 		if (ret < 0) {
-			pr_err("%s: Failed to receive the message: %d\n",
-				__func__, ret);
-			kfree(recv_buff);
+			pr_err("%s: Failed to receive the message: %d\n", __func__, ret);
 			continue;
 		} else if (recv_buff_size <= sizeof(struct gh_rm_rpc_hdr)) {
 			pr_err("%s: Invalid message size received\n", __func__);
-			kfree(recv_buff);
 			continue;
 		}
 
@@ -554,6 +546,7 @@ static int gh_rm_recv_task_fn(void *data)
 			connection = NULL;
 	}
 
+	kfree(recv_buff);
 	return 0;
 }
 
-- 
GitLab

