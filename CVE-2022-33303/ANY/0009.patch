From 94623298e7049f7a6b8134b3eadfc7e9d5b3cc81 Mon Sep 17 00:00:00 2001
From: Elliot Berman <quic_eberman@quicinc.com>
Date: Mon, 6 Jun 2022 09:36:00 -0700
Subject: [PATCH] virt: gunyah: rm_core: Clean up sequence idr earlier

When RM sends an error for a given call, Linux can re-use that sequence
number later. Presently, the sequence number is kept as reserved and
could cause a denial of service if many messages are crafted which
always return an RM error.

Change-Id: Icc2b054ab8d110c63759e30d62650ebc9d02b234
Signed-off-by: Elliot Berman <quic_eberman@quicinc.com>
---
 drivers/virt/gunyah/gh_rm_core.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/drivers/virt/gunyah/gh_rm_core.c b/drivers/virt/gunyah/gh_rm_core.c
index 6f441bcbb50a9..cba9a17d2d47b 100644
--- a/drivers/virt/gunyah/gh_rm_core.c
+++ b/drivers/virt/gunyah/gh_rm_core.c
@@ -687,6 +687,10 @@ void *gh_rm_call(gh_rm_msgid_t message_id,
 	/* Wait for response */
 	wait_for_completion(&connection->seq_done);
 
+	mutex_lock(&gh_rm_call_idr_lock);
+	idr_remove(&gh_rm_call_idr, connection->seq);
+	mutex_unlock(&gh_rm_call_idr_lock);
+
 	*rm_error = connection->rm_error;
 	if (connection->rm_error) {
 		pr_err("%s: Reply for seq:%d failed with RM err: %d\n",
@@ -706,10 +710,6 @@ void *gh_rm_call(gh_rm_msgid_t message_id,
 			     connection->payload, connection->size,
 			     false);
 
-	mutex_lock(&gh_rm_call_idr_lock);
-	idr_remove(&gh_rm_call_idr, connection->seq);
-	mutex_unlock(&gh_rm_call_idr_lock);
-
 	ret = connection->payload;
 	*resp_buff_size = connection->size;
 
-- 
GitLab

