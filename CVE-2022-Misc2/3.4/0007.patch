From ab4d5cb798b6e69afac5d8b95c3e4bd8992fa9c6 Mon Sep 17 00:00:00 2001
From: Yiduo Wang <yiduow@codeaurora.org>
Date: Tue, 29 Apr 2014 11:05:46 -0700
Subject: [PATCH] msm: camera: Fix possible kernel panic in general buf manager

Make sure vb2_buf is in the stream queue list to avoid potential
kernel panic if the content in the address of vb2_buf is invalid.

Issue: SEC-2469
Change-Id: I43d66e33d0544b832b31378c01af182cfe0e8d49
Signed-off-by: Yiduo Wang <yiduow@codeaurora.org>
(cherry picked from commit ae6266f79fca241635a9efa7625ca99c12e30286)
---
 .../platform/msm/camera_v2/msm_vb2/msm_vb2.c  | 29 +++++++++++++------
 1 file changed, 20 insertions(+), 9 deletions(-)

diff --git a/drivers/media/platform/msm/camera_v2/msm_vb2/msm_vb2.c b/drivers/media/platform/msm/camera_v2/msm_vb2/msm_vb2.c
index 5918bf3093d..a0d66fa5f97 100644
--- a/drivers/media/platform/msm/camera_v2/msm_vb2/msm_vb2.c
+++ b/drivers/media/platform/msm/camera_v2/msm_vb2/msm_vb2.c
@@ -283,6 +283,7 @@ static int msm_vb2_put_buf(struct vb2_buffer *vb, int session_id,
 	struct msm_stream *stream;
 	struct msm_session *session;
 	struct msm_vb2_buffer *msm_vb2;
+	struct vb2_buffer *vb2_buf = NULL;
 	int rc = 0;
 	unsigned long flags, rl_flags;
 
@@ -300,6 +301,17 @@ static int msm_vb2_put_buf(struct vb2_buffer *vb, int session_id,
 
 	spin_lock_irqsave(&stream->stream_lock, flags);
 	if (vb) {
+		list_for_each_entry(msm_vb2, &(stream->queued_list), list) {
+			vb2_buf = &(msm_vb2->vb2_buf);
+			if (vb2_buf == vb)
+				break;
+		}
+		if (vb2_buf != vb) {
+			pr_err("VB buffer is INVALID vb=%p, ses_id=%d, str_id=%d\n",
+					vb, session_id, stream_id);
+			spin_unlock_irqrestore(&stream->stream_lock, flags);
+			return -EINVAL;
+		}
 		msm_vb2 =
 			container_of(vb, struct msm_vb2_buffer, vb2_buf);
 		if (msm_vb2->in_freeq) {
@@ -308,7 +320,8 @@ static int msm_vb2_put_buf(struct vb2_buffer *vb, int session_id,
 		} else
 			rc = -EINVAL;
 	} else {
-		pr_err("%s: VB buffer is null\n", __func__);
+		pr_err(" VB buffer is null for ses_id=%d, str_id=%d\n",
+			    session_id, stream_id);
 		rc = -EINVAL;
 	}
 	spin_unlock_irqrestore(&stream->stream_lock, flags);
@@ -347,11 +360,10 @@ static int msm_vb2_buf_done(struct vb2_buffer *vb, int session_id,
 				break;
 		}
 		if (vb2_buf != vb) {
-			pr_err("%s:%d VB buffer is INVALID vb=%x, ses_id=%d, str_id=%d\n",
-				__func__, __LINE__, (unsigned int)vb,
-				session_id, stream_id);
-			rc = -EINVAL;
-			goto out;
+			pr_err("VB buffer is INVALID ses_id=%d, str_id=%d, vb=%p\n",
+				    session_id, stream_id, vb);
+			spin_unlock_irqrestore(&stream->stream_lock, flags);
+			return -EINVAL;
 		}
 		msm_vb2 =
 			container_of(vb, struct msm_vb2_buffer, vb2_buf);
@@ -366,11 +378,10 @@ static int msm_vb2_buf_done(struct vb2_buffer *vb, int session_id,
 		} else
 			rc = -EINVAL;
 	} else {
-		pr_err("%s:%d VB buffer is NULL for ses_id=%d, str_id=%d\n",
-			__func__, __LINE__, session_id, stream_id);
+		pr_err(" VB buffer is NULL for ses_id=%d, str_id=%d\n",
+			    session_id, stream_id);
 		rc = -EINVAL;
 	}
-out:
 	spin_unlock_irqrestore(&stream->stream_lock, flags);
 	read_unlock_irqrestore(&session->stream_rwlock, rl_flags);
 	return rc;
