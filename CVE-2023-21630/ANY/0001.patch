From ed0fef0e4177a9e7fb31d85852c8f02ab1a0876f Mon Sep 17 00:00:00 2001
From: Pravin Kumar Ravi <quic_pravinku@quicinc.com>
Date: Wed, 19 Oct 2022 03:50:20 -0700
Subject: [PATCH] msm: synx: Check for zero before reducing bind handles

Suppose user has sent invalid external fence to bind API. Now, while
binding, if synx signal comes in parallel, it will set number of bound
synxs as 0 after signal. Further reduction on that number(num_bound_synxs)
(in case of callback registration failure) would make it wrap
around. So, now num_bound_synxs is large value and abrupt close on synx
fd will lead to synx_util_object_destroy. Here, the for loop on
num_bound_synxs would lead to invalid memory access.

This change decrements num_bound_synxs only if not zero.

Change-Id: I54bad13e602203816702d8253aaaa98fb08b83d6
Signed-off-by: Pravin Kumar Ravi <quic_pravinku@quicinc.com>
---
 drivers/media/platform/msm/synx/synx.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/drivers/media/platform/msm/synx/synx.c b/drivers/media/platform/msm/synx/synx.c
index a2d2d4e1f2d5..22a68823f618 100644
--- a/drivers/media/platform/msm/synx/synx.c
+++ b/drivers/media/platform/msm/synx/synx.c
@@ -975,7 +975,8 @@ int synx_bind(struct synx_session session_id,
 		mutex_lock(&synx_obj->obj_lock);
 		memset(&synx_obj->bound_synxs[bound_idx], 0,
 			sizeof(struct synx_external_desc));
-		synx_obj->num_bound_synxs--;
+		if (synx_obj->num_bound_synxs)
+			synx_obj->num_bound_synxs--;
 		goto free;
 	}
 
-- 
GitLab

