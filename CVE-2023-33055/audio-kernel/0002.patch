From 16b7b12c4fd03748389eda3649bb6e92e265a7b8 Mon Sep 17 00:00:00 2001
From: Shalini Manjunatha <quic_c_shalma@quicinc.com>
Date: Wed, 24 May 2023 18:58:54 +0530
Subject: [PATCH] dsp: q6core: validate payload size before access for AVCS

Payload size is not checked before payload access for AVCS.
Check size to avoid out-of-boundary memory access.

Change-Id: Iff797dc5ad2467884171642bc46f851dadcc2d89
Signed-off-by: Shalini Manjunatha <quic_c_shalma@quicinc.com>
---
 4.0/dsp/q6core.c | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/4.0/dsp/q6core.c b/4.0/dsp/q6core.c
index 6cca73543..781a9f773 100644
--- a/4.0/dsp/q6core.c
+++ b/4.0/dsp/q6core.c
@@ -1,6 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0-only
 /*
  * Copyright (c) 2012-2020, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2023 Qualcomm Innovation Center, Inc. All rights reserved.
  */
 
 #include <linux/kernel.h>
@@ -472,6 +473,12 @@ static int32_t aprv2_core_fn_q(struct apr_client_data *data, void *priv)
 	case AVCS_CMD_RSP_LOAD_MODULES:
 		pr_debug("%s: Received AVCS_CMD_RSP_LOAD_MODULES\n",
 				__func__);
+		if (data->payload_size != ((sizeof(struct avcs_load_unload_modules_sec_payload)
+			* rsp_payload->num_modules) + sizeof(uint32_t))) {
+			pr_err("%s: payload size greater than expected size %d\n",
+				 __func__,data->payload_size);
+			return -EINVAL;
+		}
 		memcpy(rsp_payload, data->payload, data->payload_size);
 		q6core_lcl.avcs_module_resp_received = 1;
 		wake_up(&q6core_lcl.avcs_module_load_unload_wait);
@@ -997,6 +1004,8 @@ int32_t q6core_avcs_load_unload_modules(struct avcs_load_unload_modules_payload
 		return -ENOMEM;
 	}
 
+	rsp_payload->num_modules = num_modules;
+
 	memcpy((uint8_t *)mod + sizeof(struct apr_hdr) +
 			sizeof(struct avcs_load_unload_modules_meminfo),
 			payload, payload_size);
-- 
GitLab

