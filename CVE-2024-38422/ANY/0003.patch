From 40437702c72ed3f1ba6a2be0766ee94d33a33f95 Mon Sep 17 00:00:00 2001
From: Abinath S <quic_abins@quicinc.com>
Date: Tue, 21 May 2024 21:33:51 +0530
Subject: [PATCH] dsp: q6voice: Adds checks for an integer overflow

there is no check for cvs_voc_pkt[2],when receives
0xffffffff from ADSP which results in an integer overflow
Fix is to address this.

(cherry picked from commit 4524418cd14dce47e4ea7234618f919e28dbbe5a)
Signed-off-by: Abinath S <quic_abins@quicinc.com>
Change-Id: I210cee1d00494e4f93827ae8d373e8abdce91236
---
 sound/soc/msm/qdsp6v2/q6voice.c | 24 ++++++++++++++++++++----
 1 file changed, 20 insertions(+), 4 deletions(-)

diff --git a/sound/soc/msm/qdsp6v2/q6voice.c b/sound/soc/msm/qdsp6v2/q6voice.c
index 0913d7ff642df..30508ddfac902 100644
--- a/sound/soc/msm/qdsp6v2/q6voice.c
+++ b/sound/soc/msm/qdsp6v2/q6voice.c
@@ -1,5 +1,5 @@
 /*  Copyright (c) 2012-2016, The Linux Foundation. All rights reserved.
- *
+ *  Copyright (c) 2024 Qualcomm Innovation Center, Inc. All rights reserved.
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
  * only version 2 as published by the Free Software Foundation.
@@ -34,6 +34,17 @@
 #define CMD_STATUS_SUCCESS 0
 #define CMD_STATUS_FAIL 1
 
+/* Checking for unsigned overflow is relatively easy without causing UB. */
+ #define __unsigned_add_overflow(a, b, d) ({	\
+ 	typeof(a) __a = (a);			\
+ 	typeof(b) __b = (b);			\
+	typeof(d) __d = (d);			\
+ 	(void) (&__a == &__b);			\
+	(void) (&__a == __d);			\
+	*__d = __a + __b;			\
+ 	*__d < __a;				\
+})
+
 enum {
 	VOC_TOKEN_NONE,
 	VOIP_MEM_MAP_TOKEN,
@@ -6593,7 +6604,7 @@ static int32_t qdsp_cvs_callback(struct apr_client_data *data, void *priv)
 			 VSS_ISTREAM_EVT_OOB_NOTIFY_ENC_BUFFER_READY) {
 		int ret = 0;
 		u16 cvs_handle;
-		uint32_t *cvs_voc_pkt;
+		uint32_t *cvs_voc_pkt, tot_buf_sz;
 		struct cvs_enc_buffer_consumed_cmd send_enc_buf_consumed_cmd;
 		void *apr_cvs;
 
@@ -6622,9 +6633,14 @@ static int32_t qdsp_cvs_callback(struct apr_client_data *data, void *priv)
 			VSS_ISTREAM_EVT_OOB_NOTIFY_ENC_BUFFER_CONSUMED;
 
 		cvs_voc_pkt = v->shmem_info.sh_buf.buf[1].data;
+
+		if (__unsigned_add_overflow(cvs_voc_pkt[2], (uint32_t)(3 * sizeof(uint32_t)), &tot_buf_sz)) {
+			 pr_err("%s: integer overflow detected\n", __func__);
+			 return -EINVAL;
+		}
+
 		if (cvs_voc_pkt != NULL &&  common.mvs_info.ul_cb != NULL) {
-			if (v->shmem_info.sh_buf.buf[1].size <
-			    ((3 * sizeof(uint32_t)) + cvs_voc_pkt[2])) {
+			if (v->shmem_info.sh_buf.buf[1].size < tot_buf_sz) {
 				pr_err("%s: invalid voc pkt size\n", __func__);
 				return -EINVAL;
 			}
-- 
GitLab

