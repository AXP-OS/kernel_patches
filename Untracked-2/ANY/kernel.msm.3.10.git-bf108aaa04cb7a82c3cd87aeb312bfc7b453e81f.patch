From bf108aaa04cb7a82c3cd87aeb312bfc7b453e81f Mon Sep 17 00:00:00 2001
From: Xiaozhe Shi <xiaozhes@codeaurora.org>
Date: Fri, 20 Sep 2013 11:43:52 -0700
Subject: [PATCH] power: qpnp-bms: Fix memory leaks when probe fails

There exists a memory leak when the qpnp-bms driver's probe function
fails after loading the battery data. Fix this by freeing that memory
in the error handling of the probe function. Similarly, free the same
memory if the driver is removed dynamically.

Change-Id: I074605f8b698ab780c9f7e90feede261d082b05f
Signed-off-by: Xiaozhe Shi <xiaozhes@codeaurora.org>
---
 drivers/power/qpnp-bms.c |   83 +++++++++++++++++++++++++++++++---------------
 1 files changed, 56 insertions(+), 27 deletions(-)

diff --git a/drivers/power/qpnp-bms.c b/drivers/power/qpnp-bms.c
index 004164e..771ec52 100644
--- a/drivers/power/qpnp-bms.c
+++ b/drivers/power/qpnp-bms.c
@@ -181,6 +181,7 @@ struct qpnp_bms_chip {
 	int				default_rbatt_mohm;
 	int				rbatt_capacitive_mohm;
 	int				rbatt_mohm;
+	int				batt_data_dt;
 
 	struct delayed_work		calculate_soc_delayed_work;
 	struct work_struct		recalc_work;
@@ -3479,7 +3480,7 @@ static int64_t read_battery_id(struct qpnp_bms_chip *chip)
 static int set_battery_data(struct qpnp_bms_chip *chip)
 {
 	int64_t battery_id;
-	int rc, dt_data = false;
+	int rc = 0, dt_data = false;
 	struct bms_battery_data *batt_data;
 	struct device_node *node;
 
@@ -3506,30 +3507,38 @@ static int set_battery_data(struct qpnp_bms_chip *chip)
 		if (node) {
 			batt_data = kzalloc(sizeof(struct bms_battery_data),
 					GFP_KERNEL);
-			batt_data->fcc_temp_lut = kzalloc(
-					sizeof(struct single_row_lut),
-					GFP_KERNEL);
-			batt_data->pc_temp_ocv_lut = kzalloc(
-					sizeof(struct pc_temp_ocv_lut),
-					GFP_KERNEL);
-			batt_data->rbatt_sf_lut = kzalloc(
-					sizeof(struct sf_lut), GFP_KERNEL);
-
-			batt_data->max_voltage_uv = -1;
-			batt_data->cutoff_uv = -1;
-			batt_data->iterm_ua = -1;
-
-			rc = of_batterydata_read_data(node,
-					batt_data, battery_id);
-			if (rc) {
-				pr_err("battery data load failed, using palladium 1500\n");
-				kfree(batt_data->fcc_temp_lut);
-				kfree(batt_data->pc_temp_ocv_lut);
-				kfree(batt_data->rbatt_sf_lut);
-				kfree(batt_data);
-				batt_data = &palladium_1500_data;
+			if (batt_data) {
+				batt_data->fcc_temp_lut = kzalloc(
+						sizeof(struct single_row_lut),
+						GFP_KERNEL);
+				batt_data->pc_temp_ocv_lut = kzalloc(
+						sizeof(struct pc_temp_ocv_lut),
+						GFP_KERNEL);
+				batt_data->rbatt_sf_lut = kzalloc(
+						sizeof(struct sf_lut),
+						GFP_KERNEL);
+
+				batt_data->max_voltage_uv = -1;
+				batt_data->cutoff_uv = -1;
+				batt_data->iterm_ua = -1;
+
+				rc = of_batterydata_read_data(node,
+						batt_data, battery_id);
+				if (rc == 0 && batt_data->fcc_temp_lut
+						&& batt_data->pc_temp_ocv_lut
+						&& batt_data->rbatt_sf_lut) {
+					dt_data = true;
+				} else {
+					pr_err("battery data load failed, using palladium 1500\n");
+					kfree(batt_data->fcc_temp_lut);
+					kfree(batt_data->pc_temp_ocv_lut);
+					kfree(batt_data->rbatt_sf_lut);
+					kfree(batt_data);
+					batt_data = &palladium_1500_data;
+				}
 			} else {
-				dt_data = true;
+				pr_err("battery data alloc failed, using palladium 1500\n");
+				batt_data = &palladium_1500_data;
 			}
 		} else {
 			pr_warn("invalid battid, palladium 1500 assumed batt_id %llx\n",
@@ -3556,13 +3565,21 @@ static int set_battery_data(struct qpnp_bms_chip *chip)
 	if (batt_data->iterm_ua >= 0 && dt_data)
 		chip->chg_term_ua = batt_data->iterm_ua;
 
-	if (dt_data)
-		kfree(batt_data);
-
 	if (chip->pc_temp_ocv_lut == NULL) {
 		pr_err("temp ocv lut table is NULL\n");
+		if (dt_data) {
+			kfree(batt_data->fcc_temp_lut);
+			kfree(batt_data->pc_temp_ocv_lut);
+			kfree(batt_data->rbatt_sf_lut);
+			kfree(batt_data);
+		}
 		return -EINVAL;
 	}
+
+	chip->batt_data_dt = dt_data;
+	if (dt_data)
+		kfree(batt_data);
+
 	return 0;
 }
 
@@ -3679,6 +3696,8 @@ static inline int bms_read_properties(struct qpnp_bms_chip *chip)
 		chip->fcc_learning_samples = devm_kzalloc(&chip->spmi->dev,
 				(sizeof(struct fcc_sample) *
 				chip->min_fcc_learning_samples), GFP_KERNEL);
+		if (chip->fcc_learning_samples == NULL)
+			return -ENOMEM;
 		pr_debug("min-fcc-soc=%d, min-fcc-pc=%d, min-fcc-cycles=%d\n",
 			chip->min_fcc_learning_soc, chip->min_fcc_ocv_pc,
 			chip->min_fcc_learning_samples);
@@ -4218,6 +4237,11 @@ error_setup:
 	wakeup_source_trash(&chip->soc_wake_source.source);
 	wake_lock_destroy(&chip->low_voltage_wake_lock);
 	wake_lock_destroy(&chip->cv_wake_lock);
+	if (chip->batt_data_dt) {
+		kfree(chip->fcc_temp_lut);
+		kfree(chip->pc_temp_ocv_lut);
+		kfree(chip->rbatt_sf_lut);
+	}
 error_resource:
 error_read:
 	kfree(chip);
@@ -4230,6 +4254,11 @@ qpnp_bms_remove(struct spmi_device *spmi)
 	struct qpnp_bms_chip *chip = dev_get_drvdata(&spmi->dev);
 
 	dev_set_drvdata(&spmi->dev, NULL);
+	if (chip->batt_data_dt) {
+		kfree(chip->fcc_temp_lut);
+		kfree(chip->pc_temp_ocv_lut);
+		kfree(chip->rbatt_sf_lut);
+	}
 	kfree(chip);
 	return 0;
 }
-- 
1.7.8.3

