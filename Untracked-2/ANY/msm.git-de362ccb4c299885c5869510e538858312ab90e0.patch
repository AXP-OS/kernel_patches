From de362ccb4c299885c5869510e538858312ab90e0 Mon Sep 17 00:00:00 2001
From: Shubhraprakash Das <sadas@codeaurora.org>
Date: Thu, 1 Aug 2013 17:32:45 -0700
Subject: [PATCH] msm: kgsl: Fix memory entry leak when calling
 adreno_convertaddr

When adreno_convertaddr is called the memory searched in this function
may have a memory entry associated with it if this allocation belongs
to user space. A reference to this memory entry is taken when
this function is called which should be returned when the caller is
done using the memory. Made changes to return a reference to the
entry when calling this function which is returned when caller is
done using the memory.

Change-Id: I610553fd4b119d3c47cbfcec970d50046dbb2863
Signed-off-by: Shubhraprakash Das <sadas@codeaurora.org>
Signed-off-by: Lynus Vaz <lvaz@codeaurora.org>
---
 drivers/gpu/msm/adreno.c            | 42 ++++++++++++++++++++++++++++++-------
 drivers/gpu/msm/adreno.h            |  6 ++++--
 drivers/gpu/msm/adreno_postmortem.c | 14 +++++++++++--
 drivers/gpu/msm/adreno_snapshot.c   | 22 +++++++++++++++++--
 4 files changed, 71 insertions(+), 13 deletions(-)

diff --git a/drivers/gpu/msm/adreno.c b/drivers/gpu/msm/adreno.c
index 4fbbda4..ed1ee8d 100644
--- a/drivers/gpu/msm/adreno.c
+++ b/drivers/gpu/msm/adreno.c
@@ -3158,15 +3158,30 @@ struct kgsl_memdesc *adreno_find_ctxtmem(struct kgsl_device *device,
 	return desc;
 }
 
+/*
+ * adreno_find_region() - Find corresponding allocation for a given address
+ * @device: Device on which address operates
+ * @pt_base: The pagetable in which address is mapped
+ * @gpuaddr: The gpu address
+ * @size: Size in bytes of the address
+ * @entry: If the allocation is part of user space allocation then the mem
+ * entry is returned in this parameter. Caller is supposed to decrement
+ * refcount on this entry after its done using it.
+ *
+ * Finds an allocation descriptor for a given gpu address range
+ *
+ * Returns the descriptor on success else NULL
+ */
 struct kgsl_memdesc *adreno_find_region(struct kgsl_device *device,
 						phys_addr_t pt_base,
 						unsigned int gpuaddr,
-						unsigned int size)
+						unsigned int size,
+						struct kgsl_mem_entry **entry)
 {
-	struct kgsl_mem_entry *entry;
 	struct adreno_device *adreno_dev = ADRENO_DEVICE(device);
 	struct adreno_ringbuffer *ringbuffer = &adreno_dev->ringbuffer;
 
+	*entry = NULL;
 	if (kgsl_gpuaddr_in_memdesc(&ringbuffer->buffer_desc, gpuaddr, size))
 		return &ringbuffer->buffer_desc;
 
@@ -3180,20 +3195,33 @@ struct kgsl_memdesc *adreno_find_region(struct kgsl_device *device,
 					size))
 		return &device->mmu.setstate_memory;
 
-	entry = kgsl_get_mem_entry(device, pt_base, gpuaddr, size);
+	*entry = kgsl_get_mem_entry(device, pt_base, gpuaddr, size);
 
-	if (entry)
-		return &entry->memdesc;
+	if (*entry)
+		return &((*entry)->memdesc);
 
 	return adreno_find_ctxtmem(device, pt_base, gpuaddr, size);
 }
 
+/*
+ * adreno_convertaddr() - Convert a gpu address to kernel mapped address
+ * @device: Device on which the address operates
+ * @pt_base: The pagetable in which address is mapped
+ * @gpuaddr: The start address
+ * @size: The length of address range
+ * @entry: If the allocation is part of user space allocation then the mem
+ * entry is returned in this parameter. Caller is supposed to decrement
+ * refcount on this entry after its done using it.
+ *
+ * Returns the converted host pointer on success else NULL
+ */
 uint8_t *adreno_convertaddr(struct kgsl_device *device, phys_addr_t pt_base,
-			    unsigned int gpuaddr, unsigned int size)
+			    unsigned int gpuaddr, unsigned int size,
+				struct kgsl_mem_entry **entry)
 {
 	struct kgsl_memdesc *memdesc;
 
-	memdesc = adreno_find_region(device, pt_base, gpuaddr, size);
+	memdesc = adreno_find_region(device, pt_base, gpuaddr, size, entry);
 
 	return memdesc ? kgsl_gpuaddr_to_vaddr(memdesc, gpuaddr) : NULL;
 }
diff --git a/drivers/gpu/msm/adreno.h b/drivers/gpu/msm/adreno.h
index d37cb20..b97c1b5 100644
--- a/drivers/gpu/msm/adreno.h
+++ b/drivers/gpu/msm/adreno.h
@@ -488,10 +488,12 @@ unsigned int adreno_a3xx_rbbm_clock_ctl_default(struct adreno_device
 struct kgsl_memdesc *adreno_find_region(struct kgsl_device *device,
 						phys_addr_t pt_base,
 						unsigned int gpuaddr,
-						unsigned int size);
+						unsigned int size,
+						struct kgsl_mem_entry **entry);
 
 uint8_t *adreno_convertaddr(struct kgsl_device *device,
-	phys_addr_t pt_base, unsigned int gpuaddr, unsigned int size);
+	phys_addr_t pt_base, unsigned int gpuaddr, unsigned int size,
+	struct kgsl_mem_entry **entry);
 
 struct kgsl_memdesc *adreno_find_ctxtmem(struct kgsl_device *device,
 	phys_addr_t pt_base, unsigned int gpuaddr, unsigned int size);
diff --git a/drivers/gpu/msm/adreno_postmortem.c b/drivers/gpu/msm/adreno_postmortem.c
index 0397cca..8ac84e6 100644
--- a/drivers/gpu/msm/adreno_postmortem.c
+++ b/drivers/gpu/msm/adreno_postmortem.c
@@ -199,8 +199,9 @@ static void dump_ib(struct kgsl_device *device, char *buffId,
 	phys_addr_t pt_base, uint32_t base_offset, uint32_t ib_base,
 	uint32_t ib_size, bool dump)
 {
+	struct kgsl_mem_entry *ent = NULL;
 	uint8_t *base_addr = adreno_convertaddr(device, pt_base,
-		ib_base, ib_size*sizeof(uint32_t));
+		ib_base, ib_size*sizeof(uint32_t), &ent);
 
 	if (base_addr && dump)
 		print_hex_dump(KERN_ERR, buffId, DUMP_PREFIX_OFFSET,
@@ -210,6 +211,10 @@ static void dump_ib(struct kgsl_device *device, char *buffId,
 			"offset:%5.5X%s\n",
 			buffId, ib_base, ib_size*4, base_offset,
 			base_addr ? "" : " [Invalid]");
+	if (ent) {
+		kgsl_memdesc_unmap(&ent->memdesc);
+		kgsl_mem_entry_put(ent);
+	}
 }
 
 #define IB_LIST_SIZE	64
@@ -228,13 +233,14 @@ static void dump_ib1(struct kgsl_device *device, phys_addr_t pt_base,
 	int i, j;
 	uint32_t value;
 	uint32_t *ib1_addr;
+	struct kgsl_mem_entry *ent = NULL;
 
 	dump_ib(device, "IB1:", pt_base, base_offset, ib1_base,
 		ib1_size, dump);
 
 	/* fetch virtual address for given IB base */
 	ib1_addr = (uint32_t *)adreno_convertaddr(device, pt_base,
-		ib1_base, ib1_size*sizeof(uint32_t));
+		ib1_base, ib1_size*sizeof(uint32_t), &ent);
 	if (!ib1_addr)
 		return;
 
@@ -261,6 +267,10 @@ static void dump_ib1(struct kgsl_device *device, phys_addr_t pt_base,
 			++ib_list->count;
 		}
 	}
+	if (ent) {
+		kgsl_memdesc_unmap(&ent->memdesc);
+		kgsl_mem_entry_put(ent);
+	}
 }
 
 static void adreno_dump_rb_buffer(struct kgsl_device *device, const void *buf,
diff --git a/drivers/gpu/msm/adreno_snapshot.c b/drivers/gpu/msm/adreno_snapshot.c
index b7c2237f..b04d5f0 100644
--- a/drivers/gpu/msm/adreno_snapshot.c
+++ b/drivers/gpu/msm/adreno_snapshot.c
@@ -37,6 +37,7 @@ static struct kgsl_snapshot_obj {
 	phys_addr_t ptbase;
 	void *ptr;
 	int dwords;
+	struct kgsl_mem_entry *entry;
 } objbuf[SNAPSHOT_OBJ_BUFSIZE];
 
 /* Pointer to the next open entry in the object list */
@@ -49,6 +50,7 @@ static void push_object(struct kgsl_device *device, int type,
 {
 	int index;
 	void *ptr;
+	struct kgsl_mem_entry *entry = NULL;
 
 	/*
 	 * Sometimes IBs can be reused in the same dump.  Because we parse from
@@ -74,7 +76,7 @@ static void push_object(struct kgsl_device *device, int type,
 	 * adreno_convertaddr verifies that the IB size is valid - at least in
 	 * the context of it being smaller then the allocated memory space
 	 */
-	ptr = adreno_convertaddr(device, ptbase, gpuaddr, dwords << 2);
+	ptr = adreno_convertaddr(device, ptbase, gpuaddr, dwords << 2, &entry);
 
 	if (ptr == NULL) {
 		KGSL_DRV_ERR(device,
@@ -87,6 +89,7 @@ static void push_object(struct kgsl_device *device, int type,
 	objbuf[objbufptr].gpuaddr = gpuaddr;
 	objbuf[objbufptr].ptbase = ptbase;
 	objbuf[objbufptr].dwords = dwords;
+	objbuf[objbufptr].entry = entry;
 	objbuf[objbufptr++].ptr = ptr;
 }
 
@@ -562,6 +565,7 @@ static int ib_add_gpu_object(struct kgsl_device *device, phys_addr_t ptbase,
 {
 	int i, ret, rem = dwords;
 	unsigned int *src;
+	struct kgsl_mem_entry *entry = NULL;
 
 	/*
 	 * If the object is already in the list, we don't need to parse it again
@@ -571,7 +575,7 @@ static int ib_add_gpu_object(struct kgsl_device *device, phys_addr_t ptbase,
 		return 0;
 
 	src = (unsigned int *) adreno_convertaddr(device, ptbase, gpuaddr,
-		dwords << 2);
+		dwords << 2, &entry);
 
 	if (src == NULL)
 		return -EINVAL;
@@ -626,6 +630,11 @@ done:
 	if (ret >= 0)
 		snapshot_frozen_objsize += ret;
 
+	if (entry) {
+		kgsl_memdesc_unmap(&entry->memdesc);
+		kgsl_mem_entry_put(entry);
+	}
+
 	return ret;
 }
 
@@ -912,6 +921,11 @@ static int snapshot_ib(struct kgsl_device *device, void *snapshot,
 	header->ptbase = (__u32)obj->ptbase;
 	header->size = obj->dwords;
 
+	/* Make sure memory is mapped */
+	if (obj->entry)
+		src = (unsigned int *)
+		kgsl_gpuaddr_to_vaddr(&obj->entry->memdesc, obj->gpuaddr);
+
 	/* Write the contents of the ib */
 	for (i = 0; i < obj->dwords; i++, src++, dst++) {
 		*dst = *src;
@@ -944,6 +958,10 @@ static void *dump_object(struct kgsl_device *device, int obj, void *snapshot,
 		snapshot = kgsl_snapshot_add_section(device,
 			KGSL_SNAPSHOT_SECTION_IB, snapshot, remain,
 			snapshot_ib, &objbuf[obj]);
+		if (objbuf[obj].entry) {
+			kgsl_memdesc_unmap(&(objbuf[obj].entry->memdesc));
+			kgsl_mem_entry_put(objbuf[obj].entry);
+		}
 		break;
 	default:
 		KGSL_DRV_ERR(device,
-- 
1.8.2.1

